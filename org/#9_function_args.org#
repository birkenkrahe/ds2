#+TITLE: FUNCTION ARGUMENTS
#+AUTHOR: Marcus Birkenkrahe
#+SUBTITLE:DSC205 Introduction to Advanced Data Science
#+STARTUP:overview hideblocks indent entitiespretty
#+OPTIONS: toc:nil num:nil ^:nil
#+PROPERTY: header-args:R :exports both :results output :session *R* :noweb yes
* Arguments
#+attr_latex: :width 400px
[[../img/9_argument.jpg]]

- Watch: [[https://youtu.be/ohDB5gbtaEQ]["The Argument" by Monty Python]] (the British comedy group that
  gave the "Python" programming language its name).

- The English word 'argument' comes from Latin /argumentum/ for /make
  clear, prove, accuse/, and stands for any 'process of reasoning'[fn:1].

- Here: default arguments, missing argument values, and passing extra
  arguments using ellipses (...)

* Lazy argument evaluation

- "Lazy" evaluation refers to the fact that expressions are evaluated
  only when they're needed by the program (saving time and effort).

- We're going to look at an extended working example: searching
  through a ~list~ for ~matrix~ objects and trying to multiply them with
  another ~matrix~ specified as a second argument.

* Intermission: matrix multiplication

- In order to multiply two matrices A and B of size m x n and p x q,
  it must be true that n = p (column length of A == row length of B).
  #+attr_latex: :width 400px
  [[../img/9_matmult.png]]

- Unlike ~matrix~ addition, subtraction and scalar multiplication (with
  a number), matrix multiplication is not an element-wide operation,
  and the operator is not ~*~ but instead ~%*%~.

- Example: create two matrices, print them and check their dimension:
  #+name: matrices_A_B
  #+begin_src R
    A <- rbind(c(2,5,2),  # rbind is filled by row
               c(6,1,4))
    A
    ## check dimension
    dim(A)
    B <- cbind(c(3,-1,1),  # cbind is filled by column
               c(-3,1,5))
    ## check dimension
    B
    dim(B)
  #+end_src

  #+RESULTS: matrices_A_B
  :      [,1] [,2] [,3]
  : [1,]    2    5    2
  : [2,]    6    1    4
  : [1] 2 3
  :      [,1] [,2]
  : [1,]    3   -3
  : [2,]   -1    1
  : [3,]    1    5
  : [1] 3 2

- Let's write a function ~multiply~ to check compatibility and run it:
  1) ~function~ arguments are matrices ~A~ and ~B~.
  2) test if ~ncol(A)~ is equal to ~nrow(B)~
  3) multiply if ~TRUE~, otherwise print message
  4) test the function on the globally defined ~A~ and ~B~ matrices
     #+name: f_multiply
     #+begin_src R
       ## define function with args A and B
       multiply <- function(A,B) {
         ## check if A and B are compatible for multiplication
         ## if so, return their product
         ## otherwise, let the user know (why)
         if(ncol(A) == nrow(B)) {
           return (A %*% B)
         } else {
           paste("Matrices not compatible!")
         }
       }
       ## test your function with the previously defined matrices
       <<matrices_A_B>>
       multiply(A,B)
     #+end_src

     #+RESULTS: f_multiply
     #+begin_example
          [,1] [,2] [,3]
     [1,]    2    5    2
     [2,]    6    1    4
     [1] 2 3
          [,1] [,2]
     [1,]    3   -3
     [2,]   -1    1
     [3,]    1    5
     [1] 3 2
          [,1] [,2]
     [1,]    3    9
     [2,]   21    3
     #+end_example

- Solution for ~multiply~:
  #+name: f_multiply_
  #+begin_src R
    multiply_ <- function(A,B) {
      if (ncol(A) == nrow(B)) {
        A %*%B
      } else {
        paste("Not compatible:", ncol(A), "!=", nrow(B))
      }
    }
    <<matrices_A_B>>
    multiply_(A,B)
  #+end_src

  #+RESULTS: f_multiply_
  #+begin_example
       [,1] [,2] [,3]
  [1,]    2    5    2
  [2,]    6    1    4
  [1] 2 3
       [,1] [,2]
  [1,]    3   -3
  [2,]   -1    1
  [3,]    1    5
  [1] 3 2
       [,1] [,2]
  [1,]    3    9
  [2,]   21    3
  #+end_example

- Matrix multiplication is generally not commutative. Check that by
  running ~multiply~ on ~B~ and ~A~ in reverse order from before:
  #+begin_src R
    ## multiply B and A
    multiply(B,A)
    multiply(A,B)
  #+end_src

  #+RESULTS:
  :      [,1] [,2] [,3]
  : [1,]  -12   12   -6
  : [2,]    4   -4    2
  : [3,]   32   10   22
  :      [,1] [,2]
  : [1,]    3    9
  : [2,]   21    3

- Finally, test the function on two incompatible matrices ~C~ and ~D~:
  #+begin_src R
    C <- matrix(1:4,2); C
    D <- matrix(1:9,3); D
    ## multiply C and D
    multiply_(C,D)
  #+end_src

  #+RESULTS:
  :      [,1] [,2]
  : [1,]    1    3
  : [2,]    2    4
  :      [,1] [,2] [,3]
  : [1,]    1    4    7
  : [2,]    2    5    8
  : [3,]    3    6    9
  : [1] "Not compatible: 2 != 3"

* NEXT Example: multiple ~function~ arguments

- Write a function ~mult1~ that accepts as arguments:
  1) a list ~x~
  2) a matrix ~mat~
  3) two strings ~str1~ and ~str2~

- The function will search through ~x~, look for matrices that can be
  multiplied with ~mat~, and store the return the result in a new list.

- If no (compatible) matrices are in the supplied list ~x~, the user
  should be informed of these facts.

- Pseudocode for the function body (objects marked with ~$~):
  #+begin_example sh
    $flag matrices in the list $x
    If $x contains no matrices
       return $str1
    Otherwise:
       Make index from $flag
       Initialize matrix $counter and $result list
       Loop over matrices
         Store matrix in $temp
         If matrix is compatible with mat
            Increase matrix counter by 1
            Multiply $temp and $mat, store in $result
       If $counter is 0 (no compatible matrices)
         return $str2
       Otherwise:
         return $result of matrix multiplication
  #+end_example

- Let's code the function ~mult1~ with arguments ~x~, ~mat~, ~str1~, ~str2~:
  #+name: mult1
  #+begin_src R :results silent
    mult1 <- function(x, mat, str1, str2) {
      ## $flag matrices - use 'sapply', FUN=is.matrix
      flag <- sapply(X=x, FUN=is.matrix)
      ## check if $x has 'any' matrices, otherwise 'return' $str1
      if (!any(flag))  { # TRUE if there a no matrices in x
        return(str1)
      }
      ## $x contains matrices! make index vector $idx from $flag
      idx <- which(flag) # TRUE for matrix elements of x
      ## initialize matrix $counter to 0 and an empty $result list
      counter <- 0
      result <- list()
      ## loop over matrices (use $idx as loopindex)
      for (i in idx) { # sets i to index of x that contains a matrix
        ## store $x in $temp
        x[[i]] -> temp
        ## check if dim of $x and $mat are compatible if TRUE, multiply
        ## them, store in result (index counter) and increase counter
        if (ncol(temp) == nrow(mat)) {
          counter + 1 -> counter
          temp %*% mat -> result[[counter]]
        }
      } ## end of loop over matrix elements of list x
      ## check if $counter is still 0 then 'return' $str2
      if (counter == 0) { ## if TRUE then none of the matrices compatible
        return(str2)
      } else {      ## otherwise 'return' $result
        return (result)
      }
    }
  #+end_src

- Solution:
  #+begin_src R
    mult1 <- function(x,mat,str1,str2) {
      flag <- sapply(x, FUN=is.matrix)
      if(!any(flag)) return (str1)
      idx <- which(flag)
      counter <- 0
      result <- list()
      for (i in idx) {
        x[[i]] -> temp
        if (ncol(temp) == nrow(mat)) {
          counter <- counter + 1
          temp %*% mat -> result[[counter]]
        }
      }
      if (counter == 0) {
        return (str2)
      } else {
        return (result)
      }
    }
  #+end_src

- Test suite with three ~list~ objects ~foo~, ~bar~ and ~baz~
  #+name: matrices
  #+begin_src R :results silent
    foo <- list(matrix(1:4,2,2),
                "not a matrix",
                "definitely not a matrix",
                matrix(1:8,2,4),
                matrix(1:8,4,2))
    bar <- list(1:4,
                "not a matrix",
                c(F,T,T,T),
                "??")
    baz <- list(1:4,
                "not a matrix",
                c(F,T,T,T),
                "??",
                matrix(1:8,2,4))
  #+end_src

- Test ~mult1~ with ~foo~ and set ~mat~ to the 2 x 2 identity matrix - so
  that post-multiplying any matrix with ~mat~ will simply return the
  original matrix, as well as appropriate messages ~str1~, ~str2~:
  #+begin_src R
    <<matrices>>
    <<mult1>>
    mult1(x = foo,
          mat = diag(2),  # 2 x 2 identity matrix
          str1 = "no matrices in x",
          str2 = "no compatible matrices in x")
  #+end_src

  #+RESULTS:
  #+begin_example
  [[1]]
       [,1] [,2]
  [1,]    1    3
  [2,]    2    4

  [[2]]
       [,1] [,2]
  [1,]    1    5
  [2,]    2    6
  [3,]    3    7
  [4,]    4    8
  #+end_example

- Test ~mult1~ with ~bar~, which has no matrices at all, and the same
  arguments otherwise:
  #+begin_src R
    <<matrices>>
    <<mult1>>
    mult1(x = bar,
          mat = diag(2),
          str1 = "no matrices in x",
          str2 = "no compatible matrices in x")
  #+end_src

- Finally, test ~mult1~ with ~baz~, which has one matrix but no
  compatibility for multiplication with ~mat~:
  #+begin_src R
    <<matrices>>
    <<mult1>>
    mult1(x = baz,
          mat = diag(2),
          str1 = "no matrices in x",
          str2 = "no compatible matrices in x")
  #+end_src

- Notice that the string arguments ~str1~ and ~str2~ are used only when
  the argument ~x~ does not contain a matrix with the appropriate
  dimensions.

- R evaluates the arguments "lazily": argument values are sought only
  when they are required during execution. For ~x=foo~ you could lazily
  ignore the string arguments.

- Run ~mult1~ again only for ~x~ and ~mat~:
  #+begin_src R
    <<matrices>>
    <<mult1>>
    mult1(x=foo,mat=diag(2))
  #+end_src

  #+RESULTS:
  #+begin_example
  [[1]]
       [,1] [,2]
  [1,]    1    3
  [2,]    2    4

  [[2]]
       [,1] [,2]
  [1,]    1    5
  [2,]    2    6
  [3,]    3    7
  [4,]    4    8
  #+end_example

- However, for ~x=bar~ this will not work - an argument is missing:
  #+begin_src R
    <<matrices>>
    <<mult1>>
    mult1(x=bar,mat=diag(2))
  #+end_src

  #+RESULTS:
  : Error in mult1(x = bar, mat = diag(2)) :
  :   argument "str1" is missing, with no default

* Setting default arguments

- In the previous example, a default argument would have been useful
  to cover one of the outcomes.

- Default arguments are also useful when arguments have a large number
  of natural values that are routinely used.

- Many R functions have such default values, see e.g. ~barplot~:
  #+attr_latex: :width 400px
  [[../img/9_barplot_help.png]]

- ~barplot~ has different methods depending on the class of data fed
  into it. Can you see how many mandatory arguments each method has?

- Create another version of ~mult1~ and name it ~mult2~, which includes
  default values for ~str1~ and ~str2~.

- Below is the code for ~mult1~ with the new name - add the default
  values yourself:
  #+name: mult2
  #+begin_src R :results silent
    mult2 <- function(x,mat,str1,str2) {
      flag <- sapply(x, FUN=is.matrix)
      if(!any(flag)) return (str1)
      idx <- which(flag)
      counter <- 0
      result <- list()
      for (i in idx) {
        x[[i]] -> temp
        if (ncol(temp) == nrow(mat)) {
          counter <- counter + 1
          temp %*% mat -> result[[counter]]
        }
      }
      if (counter == 0) {
        return (str2)
      } else {
        return (result)
      }
    }
  #+end_src

- Now re-run the test suite for the three lists ~foo~, ~bar~, and ~baz~,
  with ~mat~ as the 2 x 2 identity matrix as before:
  #+begin_src R
    <<matrices>>
    <<mult2>>
    ## test foo
    ## test bar
    ## test baz
  #+end_src

- Solution:
  #+name: mult2_
  #+begin_src R :results silent
    mult2_ <- function(x, mat,
                       str1="No matrices in list",
                       str2="No compatible matrices in list") {
      flag <- sapply(x, FUN=is.matrix)
      if(!any(flag)) return (str1)
      idx <- which(flag)
      counter <- 0
      result <- list()
      for (i in idx) {
        x[[i]] -> temp
        if (ncol(temp) == nrow(mat)) {
          counter <- counter + 1
          temp %*% mat -> result[[counter]]
        }
      }
      if (counter == 0) {
        return (str2)
      } else {
        return (result)
      }
    }
  #+end_src

- Solution (test suite):
  #+begin_src R
    <<matrices>>
    mult2_(x = foo,
           mat = diag(2))
    mult2_(x = bar,
           mat = diag(2))
    mult2_(x = baz,
           mat = diag(2))
  #+end_src

- If you do not want to use the default, you can override it. Call
  ~mult2~ again for ~baz~ and change the argument for ~str2~ alone to:
  "Matrices in baz do not have 2 columns."
  #+begin_src R
    <<matrices>>
    <<mult2>>
    ## test baz but specify argument str2
  #+end_src

- Solution:
  #+begin_src R
    <<matrices>>
    <<mult2_>>
    ## test baz but specify argument str2
    mult2_(baz,diag(2),
           str2="Matrices in baz do not have 2 columns.")
  #+end_src

* Checking for missing arguments

- The ~missing~ function checks the arguments of a function to see if
  all required arguments have been supplied.

- The function takes an argument tag and returns ~TRUE~ if the specified
  argument is not found.

- Example using the ~hello(name)~ function: the function ~hello~ throws an
  error when called without argument.
  #+begin_src R
    hello <- function(name) {
      return(paste("Hello",name))
    }
    hello()
  #+end_src

- But this function with a check and call to ~missing~ will not break; 
  add the missing argument check and test the function ~hello_1~:
  #+begin_src R
    hello_1 <- function(name) {
        return(paste("Hello",name))
    }
    ## test function hello_1 without arguments
  #+end_src

- Solution:
  #+begin_src R
    hello_ <- function(name) {
      if (missing(name)) {
        return("'name' was missing, so this is the message")
      } else {
        return(paste("Hello",name))
      }
    }
    hello_()
  #+end_src
  
- This takes care of the error encountered earlier in the call to
  ~mult1~, when ~str1~ was required but not found (because no default had
  been set).

- In the modification ~mult3~ of the algorithm ~mult1~, add an argument
  check with missing both for ~str1~ and ~str2~.
  #+name: mult3
  #+begin_src R
    mult3 <- function(x,mat,str1,str2) {
      flag <- sapply(x, FUN=is.matrix)
      if(!any(flag)) return (str1)
      idx <- which(flag)
      counter <- 0
      result <- list()
      for (i in idx) {
        x[[i]] -> temp
        if (ncol(temp) == nrow(mat)) {
          counter <- counter + 1
          temp %*% mat -> result[[counter]]
        }
      }
      if (counter == 0) {
        return (str2)
      } else {
        return (result)
      }
    }
  #+end_src

- Test ~mult3~ with ~bar~ (which returns ~str1~) and with ~baz~ (which returns
  ~str2~:
  #+begin_src R
    <<matrices>>
    <<mult3>>
    ## test with bar
    ## test with baz
  #+end_src

- The ~missing~ function is also useful when it it difficult to choose a
  default value for a certain argument, yet the function needs to
  handle cases when that argument is not provided.

- In the case of this algorithm, it makes more sense to define
  defaults for ~str1~ and ~str2~ and avoid the overhead of ~missing~.

- Solution (~mult3~):
  #+begin_src R :results silent
    mult3 <- function(x, mat, str1, str2) {
      flag <- sapply(x,is.matrix)
      if(!any(flag)) {
        if(missing(str1)) {
          return ("'str1' was missing, so this is the message.")
        } else {
          return(str1)
        }
      }
      idx <- which(flag)
      counter <- 0
      result <- list()
      for (i in idx) {
        x[[i]] -> temp
        if (ncol(temp) == nrow(mat)) {
          counter <- counter + 1
          temp %*% mat -> result[[counter]]
        }
      }
      if(counter==0) {
        if (missing(str2)) {
          return("'str2' was missing, so this is the message")
        } else {
          return(str2)
        }
      } else {
        return (result)
      }
    }
  #+end_src

- Solution (test of ~mult3~):
  #+begin_src R
    <<matrices>>
    mult3(bar,diag(2))
    mult3(baz,diag(2))
  #+end_src

  #+RESULTS:
  : [1] "'str1' was missing, so this is the message."
  : [1] "'str2' was missing, so this is the message"

* Dealing with ellipses

- The /ellipsis/ or /dot-dot-dot/ notation allows you to pass extra
  arguments without having to first define them in the argument list.

- In a ~function~ definition, it is placed in the last position
  representing a variable number of arguments.

- In the example, we use the ellipsis to write a function that can
  plot the specified Fibonacci numbers:
  1) create the Fibonacci sequence ~fibseq~ to ~threshold~
  2) if ~plotit~ is ~TRUE~, plot the obtained sequence on the y-axis
     against its index for the x-axis
  3) Pass the ellipsis right into ~plot~
  #+name: myfibplot
  #+begin_src R :results silent
    myfibplot <- function(threshold, plotit=TRUE,...) {
      fibseq <- c(1,1)  # initialize
      counter <- 2
      repeat {
        fibseq <- c(fibseq,fibseq[counter-1]+fibseq[counter])
        counter <- counter +1
        if (fibseq[counter] > threshold) break
      }
      if (plotit) {
        plot(x=1:length(fibseq),y=fibseq,
             ...)
      } else {
        return (fibseq)
      }
    }
  #+end_src

- Suppress the plot but print the sequence up to ~threshold=150~:
  #+begin_src R
    <<myfibplot>>

  #+end_src

- Plot Fibonacci numbers up to the ~threshold~ 150 with ~myfib~:
  #+begin_src R :results graphics file :file ../img/myfib.png
    <<myfibplot>>
    myfibplot(150)
  #+end_src

- In this plot, the ellipsis is not used. In the next one, we'll use
  it. Add the following arguments to the plot:
  1) Give it the title "Terms of the Fibonacci sequence"
  2) Change the point character (~pch~) to 4
  3) Change the line type (~lty~) to 2
  4) Change the x-axis label (~xlab~) to "Term (n)"
  5) Change the y-axis label (~ylab~) to "Fibonacci number"
  6) Change the plot ~type~ to "both points and lines" (~"b"~)
  #+begin_src R :results graphics file :file myfib_ellipsis.png

  #+end_src

- Solution ~myfibplot~ function:
  #+name: myfibplot_
  #+begin_src R
    myfibplot_ <- function(threshold, plotit=TRUE,...) {
      fibseq <- c(1,1)  # initialize
      counter <- 2
      repeat {
        fibseq <- c(fibseq,fibseq[counter-1]+fibseq[counter])
        counter <- counter +1
        if (fibseq[counter] > threshold) break
      }
      if (plotit) {
        plot(x=1:length(fibseq),
             y=fibseq, ...)
      } else {
        return (fibseq)
      }
    }
  #+end_src

- Solution to suppress the ~plot~ but print numbers with ~threshold~ 150:
  #+begin_src R
    <<myfibplot_>>
    myfibplot_(threshold=150, plotit=FALSE)
  #+end_src

- Solution for adding ~plot~ arguments:
  #+begin_src R :results graphics file :file ../img/myfib_ellipsis_.png
    <<myfibplot_>>
    myfibplot_(threshold = 150,
               main="Terms of the Fibonacci sequence",
               pch=4,
               lty=2,
               xlab="Term (n)",
               ylab="Fibonacci number",
               type="b")
  #+end_src

- The ellipsis ~...~ can represent any number of mysterious arguments -
  to indicate proper usage, document your functions well.

- The dummy function ~unpackme(...)~ takes an ellipsis converts it into
  a list.
  #+name: unpackme
  #+begin_src R :results silent
    unpackme <- function(...) {
      x <- list(...)
      cat("Here is ... in its entirety as a list:\n")
      print(x)
      cat("The names of ... are:", names(x),"\n")
      cat("The classes of ... are:", unname(unlist(sapply(x,class))),"\n")
    }
  #+end_src

- Here's a sample run:
  1) four arguments, tagged ~aa~, ~bb~, ~cc~, and ~dd~ are contents of ~...~
  2) ~unpackme~ identifies them using ~list~
  #+begin_src R
    <<unpackme>>
    unpackme(aa = matrix(1:4,2,2),
             bb = TRUE,
             cc = c("two","strings"),
             dd = factor(c(1,1,2,1)))
  #+end_src

* TODO Exercises

These bonus exercises carry 20 points each for successful
completion. These exercises come from Davies, ch. 11. pp. 230-231.

** Annual compound interest function

Accruing annual compound interest is a common financial benefit for
investors. Given a principal investment amoung P, an interest rate
per annum i expressed as a percentage, and a frequency of interest
paid per year t, the final amount F after y years is given in this
[[https://github.com/birkenkrahe/ds2/blob/main/img/9_interest.png][formula]]:
#+attr_latex: :width 200px
[[../img/9_interest.png]]
Write a function ~F~ to compute F as per these instructions:
- Arguments must be present for P, i, t and y. The argument for t
  should have a default value of 12.
- Another argument giving a logical value that determines whether
  to ~plot~ the amount F at each integer time should be included. For
  example, if ~plotit=TRUE~ (the default) and ~y~ is 5 years, the plot
  should show the amount F at y = 1,2,3,4,5.
- If this function is plotted, the plot should always be a
  step-plot, so ~plot~ should always be called with ~type="s"~.
- If ~plotit=FALSE~, the final amount F should be returned as a
  ~numeric~ vector corresponding to the same integer times, as shown
  earlier.
- An ellipsis should also be included to control other details of
  plotting, if it takes place.

Using your function ~F~, do the following:
1) Work out the final amount after a 10-year investment of a principal
   of $5000, at an interest rate of 4.4 percent per annum compounded
   monthly.
2) Re-create the following step-plot, which shows the result of $100
   invested at 22.9 percent per annum, compounded monthly, for 20
   years:
   #+attr_latex: :width 300px
   [[../img/9_interest_compound.png]]
3) Perform another calculation based on the same parameters as in (2),
   but this time, assume the interest is compounded annually. Return
   and store the results as a numeric vector. Then, use ~lines~ to add a
   second step-line, corresponding to this annually accrued amount, to
   the plot created previously. Use a different color or line type and
   make use of the ~legend~ function so the two lines can be
   differentiated.

   Tip - this code prints two step-wise plots in the same graph:
   - the first ~plot~ plots 50 random numbers ~x~
   - the second ~plot~ plots the squared values of ~x~
   #+begin_src R :results graphics file :file step.png
     par(mfrow=c(1,1))
     x <- rnorm(50)
     plot(x,type='s', col="red", yaxt="n", ylab="")
     par(new=TRUE)
     plot(x^2,type='s', col="blue", lty=2, ylab="", yaxt="n")
     legend("topleft",
            legend=c("x","x^2"), lty=c(1,2),col=c("red","blue"))
   #+end_src

   #+RESULTS:
   [[file:step.png]]
   
** Real roots of a quadratic equation

(Note: to show the formulae in mathematical form, simply add this to
your Org-mode header (and run it with C-c C-c): #+STATUS: entitiespretty

A quadratic equation in the variable x is often expressed in the
following form: k_{1}x^{2} + k_{2}x + k_{3} = 0. Here, k_{1}, k_{2} and k_{3} are
constants. Given values for these constants, you can attempt to find
up to two real roots - values of x that satisfy the equation.

Write a function that takes k_{1}, k_{2} and k_{3} as arguments and finds and
returns any solutions (as a numeric vector) in such a situation. This
is achieved as follows:
- Evaluate k_{2}^{2} - 4k_{1}k_{3}. If this is /negative/, there are no solutions,
  and an appropriate message should be printed to the console.
- If k_{2}^{2} - 4k_{1}k_{3} is /zero/, then there is one solution, computed by
  (-k_{2}/2k_{}_{1}).
- If k_{2}^{2} - 4k_{1}k_{3} is /positive/, then there are two solutions:
  #+attr_latex: :width 300px
  [[../img/9_solutions.png]]
- No default values are needed for the three arguments, but the
  function should check to see whether any are missing. If so, an
  appropriate character string message should be returned to the user,
  informing the user that the calculations are not possible.

Test your function:
1) Confirm the following:

   1. (2x^{2} - x - 5) has roots 1.850781 and -1.350781

   2. (x^{2} + x - 5) has no real roots

2) Attempt to find solutions to the following quadratic equations:

   1. (1.3x^{2} - 8x - 3.13)

   2. (2.25x^{2}^{} - 3x + 1)

   3. (1.4x^{2} - 2.2x - 5.1)

   4. (-5x^2 + 10.11x -9.9)

3) Test your programmed response in the function if one of the
   arguments is missing.

* References

Argument Clinic. URL: [[https://en.wikipedia.org/wiki/Argument_Clinic][wikipedia.org]]. Complete sketch on [[https://www.dailymotion.com/video/x2hwqn9][dailymotion]].

* Footnotes

[fn:1] Since I'm writing this lecture on the eve of the visit of the
"Pope's astronomer", Br. Guy Consolmagno, a Jesuit and astronomer to
Pope Francis (another Jesuit), I am reminded of the reputation of
Jesuits for being great at arguing - something you could see in the
Q&A session after Gr. Guy's talk on "Astronomy, Religion and the Art
of Storytelling". One could argue that any story contains at least one
argument (a complete process of reasoning), and that the best
arguments are constructed like stories (remember [[https://github.com/birkenkrahe/ds2/blob/main/img/storytelling.png][the Freytag curve]],
which I've also used in [[https://www.researchgate.net/publication/265515052_Using_storytelling_methods_to_improve_emotion_motivation_and_attitude_of_students_writing_scientific_papers_and_theses][my paper on scientific storytelling]]).
