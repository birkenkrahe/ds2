#+TITLE:Data science on the command line - Regular expressions
#+AUTHOR:Marcus Birkenkrahe
#+SUBTITLE:Introduction to advanced data science
#+STARTUP:overview hideblocks indent inlineimages
#+OPTIONS: toc:nil num:nil ^:nil
#+PROPERTY: header-args:bash :exports both :results output
#+PROPERTY: header-args:sh :exports both :results output
#+PROPERTY: header-args:R :exports both :results output :session *R*
* README
#+attr_latex: :width 400px
#+caption: Photo: Super Hornet. Source: Flickr.com flic.kr/p/2nDe28b
[[../img/11_hornet.jpg]]

Short introduction to doing data science on the command line:
- What is the command line?
- Why use the command line for data science?
- How to get a command line that works for data science?
- Downloading data with ~curl~ and ~wget~
- *Regular expression primer*
- Cleaning data on the command line
- Database operations on the command line
- Introduction to the ~csvkit~ toolkit (Python)
- Introduction to the ~xsv~ toolkit (Rust)
- Practice with Linux (DataCamp workspaces)

- The source for this chapter is Fox, 2017 but there are many good
  books and tutorials, e,g, at [[https://www.regular-expressions.info/tutorialcnt.html][regular-expressions.info]].

- For regex especially in R, see e.g. [[https://www.datacamp.com/tutorial/regex-r-regular-expressions-guide][A Guide to R Regular Expressions]]
  (Kosourova, 2022).

* Regular expressions
#+attr_latex: :width 400px
[[../img/11_regex_cheat.png]]

- Regular expressions (/regex/ or /regexp/) are useful in extracting
  information from any text by pattern searching (with a function)

- Applications include: validation, parsing/replacing strings, format
  transformations, web scraping

- Once you've learnt this tool, you can use it in all programming
  languages with (usually) very little changes if any at all

- In data science for transformations and for SQL queries, regexp are
  absolute life savers (I use them e.g. to play through DataCamp)

- We're going to look at some examples using Emacs' Unix emulation in
  the ~*eshell*~ (open with ~M-x eshell~).

- Even better: get Ubuntu (on Windows check Microsoft store, or on a
  Chromebook with the developers' settings).

- [[https://libguides.lib.fit.edu/ld.php?content_id=50509658][This cheat sheet]] for string manipulation with the R package ~stringr~
  contains a list of important regexp on the 2nd page.

* Overview of regex operators

- We'll discuss:
  1) Anchors ~^~ ~$~
  2) Quantifiers ~*~ ~+~ ~?~ ~{}~
  3) OR operator ~|~ or ~[]~
  4) Character classes ~\d~ ~\w~ ~\s~ ~.~
  5) Flags ~g~ ~m~ ~i~
  6) Grouping and capturing ~()~
  7) Bracket expressions ~[]~
  8) Greedy and lazy match ~*~ ~+~ ~{}~
  9) Boundaries ~\b~ ~\B~
  10) Back references ~\1~
  11) Look-ahead and look-behind ~(?=)~ ~(?<=)~ ~(?!)~

* Anchors ~^~ ~$~

- The caret ~^~ matches any string that starts with its RHS operand:
  #+begin_src sh
    ls | grep '^2'   # find all files starting with 2
  #+end_src

- Why are we using ~'~ instead of ~"~ - the shell expands any variables or
  special characters bounded by ~"~ while ~'~ is treated like a /literal/.

- Let's create a text vector to work with: instead of Cicero's /Lorem
  Ipsum/, we use the beginning of St Augustine's /Confessiones/ ([[https://faculty.georgetown.edu/jod/latinconf/1.html][Source]]):
  #+begin_src R
    foo <- c("Magnus es, domine, et laudabilis valde: magna virtus tua, et sapientiae tuae non est numerus. et laudare te vult homo, aliqua portio creaturae tuae, et homo circumferens mortalitem suam, circumferens testimonium peccati sui et testimonium, quia superbis resistis: et tamen laudare te vult homo, aliqua portio creaturae tuae.tu excitas, ut laudare te delectet, quia fecisti nos ad te et inquietum est cor nostrum, donec requiescat in te. da mihi, domine, scire et intellegere, utrum sit prius invocare te an laudare te, et scire te prius sit an invocare te. sed quis te invocat nesciens te? aliud enim pro alio potest invocare nesciens. an potius invocaris, ut sciaris? quomodo autem invocabunt, in quem non crediderunt? aut quomodo credent sine praedicante? et laudabunt dominum qui requirunt eum. quaerentes enim inveniunt eum et invenientes laudabunt eum. quaeram te, domine, invocans te, et invocem te credens in te: praedicatus enim es nobis. invocat te, domine, fides mea, quam dedisti mihi, quam inspirasti mihi per humanitatem filii tui, per ministerium praedicatoris tui.")
    nchar(foo)
  #+end_src

- Then we're going to tokenize the string splitting it into its
  individual words with ~strsplit~, ~unlist~, and save the result in ~bar~:
  #+begin_src R
    strsplit(foo,split=" ") -> bar  ## split by spaces
    unlist(bar) -> bar
    length(bar)  ## how many words have we got?
    sum(nchar(bar)) ## how many characters have we retained?
  #+end_src

  #+RESULTS:
  : [1] 167
  : [1] 913

- Find all words beginning with specific letter:
  #+begin_src R
    x <- grep(pattern='^m',bar) ## finds all words beginning with 'm'
    bar[x]
  #+end_src

- In ~bash(1)~, the ~$~ matches a string that ends with its LHS operand:
  #+begin_src sh
    ls | grep '.org$' | wc -l   ## files ending with .org
  #+end_src

  #+RESULTS:
  : 45

- We could also run this from within R (but without ~' '~):
  #+begin_src R
    shell("ls | grep .org$ | wc -l")
  #+end_src

  #+RESULTS:
  : 45

- Which words in ~bar~ are ending in ~-ium~?
  #+begin_src R
    bar[grep(pattern='ium$',bar)]
  #+end_src

- Let's save ~foo~ and ~bar~ to text files for later on:
  #+begin_src R
    write(foo,"foo.txt")
    write(bar,"bar.txt")
    shell("ls foo.txt bar.txt")
  #+end_src

  #+RESULTS:
  : bar.txt
  : foo.txt

* Quantifiers ~*~ ~+~ ~?~ ~{}~

- ~abc*~ matches a string that has ~ab~ followed by zero or more ~c~:
  #+begin_src sh
    cat foo.txt | grep
  #+end_src

  #+RESULTS:
  : [1] "Magnus es, domine, et laudabilis valde: magna virtus tua, et sapientiae tuae non est numerus. et laudare te vult homo, aliqua portio creaturae tuae, et homo circumferens mortalitem suam, circumferens testimonium peccati sui et testimonium, quia superbis resistis: et tamen laudare te vult homo, aliqua portio creaturae tuae.tu excitas, ut laudare te delectet, quia fecisti nos ad te et inquietum est cor nostrum, donec requiescat in te. da mihi, domine, scire et intellegere, utrum sit prius invocare te an laudare te, et scire te prius sit an invocare te. sed quis te invocat nesciens te? aliud enim pro alio potest invocare nesciens. an potius invocaris, ut sciaris? quomodo autem invocabunt, in quem non crediderunt? aut quomodo credent sine praedicante? et laudabunt dominum qui requirunt eum. quaerentes enim inveniunt eum et invenientes laudabunt eum. quaeram te, domine, invocans te, et invocem te credens in te: praedicatus enim es nobis. invocat te, domine, fides mea, quam dedisti mihi, quam inspirasti mihi per humanitatem filii tui, per ministerium praedicatoris tui."
  
abc+        matches a string that has ab followed by one or more c
abc?        matches a string that has ab followed by zero or one c
abc{2}      matches a string that has ab followed by 2 c
abc{2,}     matches a string that has ab followed by 2 or more c
abc{2,5}    matches a string that has ab followed by 2 up to 5 c
a(bc)*      matches a string that has a followed by zero or more copies of the sequence bc
a(bc){2,5}  matches a string that has a followed by 2 up to 5 copies of the sequence bc

* OR operator ~|~ or ~[]~
* Character classes ~\d~ ~\w~ ~\s~ ~.~
* Flags ~g~ ~m~ ~i~
* Grouping and capturing ~()~
* Bracket expressions ~[]~
* Greedy and lazy match ~*~ ~+~ ~{}~
* Boundaries ~\b~ ~\B~
* Back references ~\1~
* Look-ahead and look-behind ~(?=)~ ~(?<=)~ ~(?!)~

#+begin_src sh
  ls | grep '11_*'
#+end_src

#+RESULTS:
: STDIN
: 11_cmdline.org
: 11_cmdline_csvkit.org
: 11_cmdline_practice_1.org
: 11_cmdline_sql2csv.org
: 11_cmdline_xsv.org

* References

- Jonny Fox (Jun 23, 2017). Regex tutorial- A quick cheatsheet by
  examples. [[https://medium.com/factory-mind/regex-tutorial-a-simple-cheatsheet-by-examples-649dc1c3f285][Online: medium.com]] ([[https://github.com/birkenkrahe/ds2/blob/main/pdf/regex.pdf][PDF]]).

- Jonny Fox (Mar 20, 2019). Regex cookbook - Top 15 Most common
  regex. [[https://medium.com/factory-mind/regex-cookbook-most-wanted-regex-aa721558c3c1][Online: medium.com]].

- Elena Kosourova (Oct 2022). A Guide to R Regular
  Expressions. [[https://www.datacamp.com/tutorial/regex-r-regular-expressions-guide][Online: datacamp.com]].

- Al Sweigart (2019). Automate the boring stuff with
  Python. NoStarch. [[https://automatetheboringstuff.com/][Online: automatetheboringstuff.com]].
