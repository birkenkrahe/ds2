#+TITLE:Data science on the command line
#+AUTHOR:Marcus Birkenkrahe
#+SUBTITLE:Introduction to advanced data science
#+STARTUP:overview hideblocks indent inlineimages
#+OPTIONS: toc:nil num:nil ^:nil
#+PROPERTY: header-args:bash :exports both :results output
* README
  #+attr_latex: :width 400px
  #+caption: Wireservice repo on GitHub
  [[../img/wireservice.png]]
  
- Introduction to the ~csvkit~ toolkit (Python)
- Developed by wirekit
- Practice with Linux (DataCamp workspaces)

* ~csvkit~ (Python)

- This demo is only interactive if you have access to a Linux
  installation of some sort. Source: the ~csvkit~ [[https://csvkit.readthedocs.io/en/latest/tutorial.html][online tutorial]].

- In Spring 2023, we're going to use DataCamp's new workspace feature,
  where you can install cvskit easily:

- ~csvskit~ is a Python-3 library for manipulating text files.

- [[https://youtu.be/XhShmvBYNmw][I made a video of my whole demonstration in 2022]] (14 min).
  
* Install ~csvkit~

- Many of the ~csvkit~ functions are inspired by regular Unix commands.

- ~pip~ is a python-based package manager tool.
  #+begin_example sh
  sudo pip install csvkit
  #+end_example

- Or perhaps you already have all the ~csv*~ tools? The output should
  show a bunch of different executables. ~[dir]~ is wherever your local
  binary files are installed (~l~ is a standard ~alias~ for ~ls -alF~ -
  print long listing of all files with classification):
  #+begin_src sh
    l /usr/bin/*csv*
  #+end_src

- On DataCamp workspaces, this is ~$HOME/.local/bin/~:
  #+begin_example sh
    l -t $HOME/.local/bin/*csv*
  #+end_example  
  
- If ~pip~ is missing, you can install it (shown for Debian-Linux):
  #+begin_example sh
    sudo apt install pip
  #+end_example

- Or you may have to upgrade ~pip~ (the command line will tell you):
  #+begin_example sh
    python3 -mv pip install --upgrade pip
  #+end_example

* Getting some data

1) Make a new working directory ~csvkit~ with ~mkdir~
2) Change into it with ~cd~ 
3) Check where you are with ~pwd~
   #+begin_example sh
     mkdir -v csvkit
     cd csvkit
     pwd
   #+end_example

4) Fetch the data with ~curl(1)~ - check if you got it with ~which curl~,
   otherwise install it with ~sudo apt install curl~.
   #+begin_example sh
     url="https://raw.githubusercontent.com/wireservice/csvkit/master/examples/realdata/ne_1033_data.xlsx"
     curl --location --remote-name $url
   #+end_example

   The short version of the ~curl~ options: ~-L -O~

5) Check if the file ~.xlsx~ file is there - the ~file~ command gives
   you some file type information.
   #+begin_example bash
   file *
   #+end_example

6) You can also try to get any old HTML file, like from Lyon:

   #+begin_example bash
   curl https://lyon.edu | tee fetched | head
   file fetched
   #+end_example
* Look at the data
* ~in2csv~ to re-write an Excel file as CSV file

- Excel is a binary format - you cannot look at it (without paying
  Microsoft).

- ~in2csv~ rewrites the Excel file into CSV. Btw, long file names can
  be expanded using the <TAB> key.

  #+begin_example bash
 in2csv ne_1033_data.xlsx > data.csv 2&>/dev/null
 head -5 data.csv
  #+end_example

  - ~in2csv~ runs the conversion on the following file
  - ~> data.csv~ redirects the result to a file ~data.csv~
  - ~2&>/dev/null~ throws standard error msgs away

* ~csvlook~ to get a table output of the CSV file
- ~csvlook~ provides a tabular look at the data.

  #+begin_example bash
  csvlook --max-rows 5 data.csv
  #+end_example

* ~csvcut~ to cut out columns from a CSV file
- ~csvcut~ is a version of ~cut~ for ~CSV~ files
  - the ~-n~ option shows all columns
  - the ~-c~ option shows specific columns
    #+begin_example bash
      csvcut -n data.csv
      csvcut -c 2,5,6 | head -5
    #+end_example

  - output columns can be called by name, too

    #+begin_example bash
   csvcut -c county, item_name, quantity data.csv | csvlook | head -5
    #+end_example

  - the pipe prints the first 5 rows of the respective columns
  - I want to use some of the output later so I put it into a file:

    #+begin_example bash
   csvcut -c county, item_name, quantity data.csv | tee data1.csv | csvlook | head -5
    #+end_example

- All of the previous operations can be put together in one pipe:

  #+begin_example bash
 in2csv ne_1033_data.xlsx 2&>/dev/null |
 csvcut -c county,item_name,quantity |
 csvlook |
 head -5
  #+end_example

* Examining data
* ~csvstat~ for summary statistics

- ~csvstat~ is inspired by R's ~summary~ function

  #+begin_example bash
   csvstat data1.csv
  #+end_example

  or

  #+begin_example bash
 cat data1.csv | csvstat
  #+end_example

* ~csvgrep~ for matching patterns in the file

- ~csvgrep~ is a pattern-matching search function.
  - run ~csvgrep~ on the ~data1.csv~ subset
  - focus on the ~county~ column with ~-c~
  - match the pattern ~LANCASTER~ county
  - look at the result as a table

    #+begin_example bash
   csvgrep -c county -m LANCASTER data1.csv | csvlook
    #+end_example

  - count the lines (= entries for LANCASTER county)

    #+begin_example bash
   csvgrep -c county -m LANCASTER data1.csv | wc -l
    #+end_example

* ~csvsort~ to sort rows by column

- ~csvsort~ sorts the rows by any column (or combination of columns)
  in ascending or descending (reverse) order.

  #+begin_example bash
 csvcut -c county,item_name,total_cost data.csv > data2.csv
 cat data2.csv | csvgrep -c county -m LANCASTER > data3.csv
 cat data3.csv | csvsort -c total_cost -r | csvlook
  #+end_example

* References

- Gallant (2021). xsv. URL: [[https://github.com/BurntSushi/xsv][github.com]].
- Janssens (2021). Data science at the command line (2e). O'Reilly.
