#+TITLE: LOOPS WITH "for" - BONUS ASSIGNMENT
#+AUTHOR: Marcus Birkenkrahe
#+SUBTITLE: DSC 205 - Advanced introduction to data science
#+STARTUP: overview hideblocks indent
#+OPTIONS: toc:nil num:nil ^:nil
#+PROPERTY: header-args:R :session *R* :results output :exports both :noweb yes
* README

- This BONUS PROBLEM file accompanies the [[https://github.com/birkenkrahe/ds2/blob/main/org/3_conditions.org][lecture]] on ~for~ and ~while~
  loops.
- Complete and submit the completed Org-mode file in Canvas
- Bonus points contribute to your final grade as "home assignments"
- The "literate quality" of the submission will count for your final
  points - e.g. by documenting the solution path.
- The original source of this exercise is Davies, Book of R (2016),
  pp.199-204.
- The solution will be published as a PDF after the deadline has
  passed.

* TODO Identify and pledge yourself

1) In Emacs, replace the placeholder ~[yourname]~ at the top of this
   file by your own name and write ~(pledged)~ next to it
2) Go with the cursor on the headline and hange the ~TODO~ label to ~DONE~
   by entering ~S-<right>~ ("Shift + right-arrow").

* Problem: count matrices

- Suppose you have a list named ~mylist~ that can contain other lists as
  members, but assume those "member lists" cannot themselves contain
  lists.

- Write nested ~for~ loops that can search any possible ~mylist~ defined
  this way and *count how many matrices are present*. Remember the
  extended example from the [[https://github.com/birkenkrahe/ds2/blob/main/org/5_loop_for.org][lecture on ~for~ loops]].

- Hint: set up a counter before commencing the loops that is
  incremented each time a matrix is found, regardless of whether it is
  a straightforward member of ~mylist~ or it is a member of a member
  list of ~mylist~.

- Put your solution in the next section, then move on to the testing
  suite to test it.

* TODO Solution

Remember that a full solution explains how you arrived at it and
provides any necessary steps for others to understand it.

#+name: count_matrices
#+begin_src R :noweb yes

#+end_src

* TODO Test your solution

In the code blocks below, ~:noweb~ is switched on, which means that you
can use the names of other code blocks here. If you don't want that,
simply remove the << >> lines in the code blocks.

1) Confirm that the answer is ~4~ if you have the following:
   #+name: initialize_mylist_1
   #+begin_src R :noweb yes
     mylist <- list(
       aa = c(3,4,1),
       bb = matrix(1:4,2,2),
       cc = matrix(c(T,T,F,T,F,F),3,2),
       dd = "string here",
       ee = list(
         c("hello","you"),
         matrix(c("hello","there"))),
       ff = matrix(c("red", "green", "blue", "yellow")))
     <<count_matrices>>
   #+end_src

2) Confirm that the answer is ~0~ if you have the following:
   #+name: initialize_mylist_2
   #+begin_src R
     mylist <- list(
       "tricked you",
       as.vector(
         matrix(1:6,3,2)))
     <<count_matrices>>
   #+end_src

3) Confirm that the answer is ~2~ if you have the following:
   #+name: initialize_mylist_3
   #+begin_src R
     mylist <- list(
       list(1,2,3),
       list(c(3,2),2),
       list(c(1,2),
            matrix(c(1,2))),
       rbind(1:10,100:91))
     <<count_matrices>>
   #+end_src
