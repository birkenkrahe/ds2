#+TITLE: CODING LOOPS WITH "while" - LECTURE
#+AUTHOR: Marcus Birkenkrahe
#+SUBTITLE: DSC 205 - Advanced introduction to data science
#+STARTUP: overview hideblocks indent inlineimages
#+OPTIONS: toc:nil num:nil ^:nil
#+PROPERTY: header-args:R :session *R* :results output :exports both :noweb yes
#+attr_html: :width 300px
* README
#+attr_html: :width 300px
#+caption: Photo by La-Rel Easter on Unsplash
[[../img/5_loop.jpg]]

- Download the *raw* practice file [[https://github.com/birkenkrahe/ds2/tree/main/org][from GitHub]] and save it as
  ~6_loop_while_practice.org~.

- To test your Emacs mettle, open it on the CMD line with the command
  ~emacs -nw~ (no graphics - not needed for this exercise).

* ~while~ loops

- A ~while~ loop repeats code until a condition evaluates as ~FALSE~:
  #+begin_example R
  while (loopcondition) {
    do any code in here
  }
  #+end_example

- This means to avoid /infinite loops/, the operations in the braced
  area must cause the loop to exit.

- Exiting a loop works if either the /loopcondition/ is ~FALSE~, or if a
  ~break~ command is met.

- To escape infinite loops in Emacs, enter ~C-g~ - in the ~Rterm~ or ~Rgui~
  console (outside Emacs) enter ~C-c~ or ~<ESC>~.

* Simple example

1) Set the condition variable ~myval~ to ~5~
2) Test if ~myval~ is less than ~10~
3) If it is, increase ~myval~ by ~1~
4) Print the current value of ~myval~ using ~cat~ on one line
5) Print the current value of the condition with ~cat~ on the next line
#+begin_src R
  myval <- 5
  while(myval<10) {
    myval <- myval + 1
    cat("\nmyval is now",myval,"\n")
    cat("condition is now",myval<10,"\n")
  }
#+end_src

#+RESULTS:
#+begin_example

myval is now 6 
condition is now TRUE 

myval is now 7 
condition is now TRUE 

myval is now 8 
condition is now TRUE 

myval is now 9 
condition is now TRUE 

myval is now 10 
condition is now FALSE
#+end_example

* Extended example

- It is often useful to set the /loopcondition/ to be an object so that
  you can modify it inside the braced area.

- In the example, you will use a ~while~ loop to iterate over an ~integer~
  vector ~mynumbers~ and create an /identity matrix/ using ~diag~ with the
  dimension ~dim~ matching the current integer.

- The ~diag~ function extracts or replaces the diagonal of a matrix, or
  constructs a diagonal matrix. Check out its arguments:
  #+begin_src R
    args(diag)
  #+end_src

  #+RESULTS:
  : function (x = 1, nrow, ncol, names = TRUE) 
  : NULL

- To test the function, create a 3x3 matrix ~m~ of ~0~ values and then use
  ~diag~ to turn it into an /identity/ matrix.
  #+begin_src R
    m <- matrix(0,3,3)
    m
        diag(m) <- 1
    m
  #+end_src

  #+RESULTS:
  :      [,1] [,2] [,3]
  : [1,]    0    0    0
  : [2,]    0    0    0
  : [3,]    0    0    0
  :      [,1] [,2] [,3]
  : [1,]    1    0    0
  : [2,]    0    1    0
  : [3,]    0    0    1

- Create an empty list ~LIST~ and add a 2x2 identity matrix to it by
  overwriting the first element of ~l~ with ~diag(2)~:
  #+begin_src R
    LIST <- list()
    LIST[[1]] <- diag(2)
    LIST
  #+end_src

  #+RESULTS:
  : [[1]]
  :      [,1] [,2]
  : [1,]    1    0
  : [2,]    0    1

- This loop should stop when it reaches a number in the vector
  ~mynumbers~ that's greater than ~5~, or when it reaches the end of the
  vector. The ~while~ condition is stored in a separate object
  ~mycondition~.

- Create a few initial objects first:
  #+name: initialize
  #+begin_src R :results silent
    mylist <- list()  # create an empty list to store all matrices
    counter <- 1      # set loop index counter variable to 1
    mynumbers <- c(4,5,1,2,6,2,4,6,6,2) # matrix dimensions
    mycondition <- mynumbers[counter] <= 5 # while loop condition
  #+end_src

- Create the loop:
  #+name: build_list
  #+begin_src R
    while (mycondition) {
      mylist[[counter]] <- diag(mynumbers[counter]) # add matrix to list
      counter <- counter + 1   # increase counter (stepping through mynumbers)
      ## update loop condition
      if (counter <= length(mynumbers)) {
        mycondition <- mynumbers[counter] <= 5  # counter in bounds
      } else {
        mycondition <- FALSE   # counter out of bounds (end of mynumbers)
      }
    }
    mylist
  #+end_src

  #+RESULTS: build_list
  #+begin_example
  [[1]]
       [,1] [,2] [,3] [,4]
  [1,]    1    0    0    0
  [2,]    0    1    0    0
  [3,]    0    0    1    0
  [4,]    0    0    0    1

  [[2]]
       [,1] [,2] [,3] [,4] [,5]
  [1,]    1    0    0    0    0
  [2,]    0    1    0    0    0
  [3,]    0    0    1    0    0
  [4,]    0    0    0    1    0
  [5,]    0    0    0    0    1

  [[3]]
       [,1]
  [1,]    1

  [[4]]
       [,1] [,2]
  [1,]    1    0
  [2,]    0    1
  #+end_example

- The result is a list ~mylist~ with four members because 4 is the last
  element of ~mynumbers~ not greater than 5. The identity matrices have
  dimension 4 x 4, 5 x 5, 1 x 1 and 2 x 2 (the values of ~mynumbers~).

* Changing conditions

- Based on the extended example of storing identity matrices in a
  list, determine what the resulting ~mylist~ would look like for each
  of the following possible ~mynumbers~ vectors, without executing
  anything - then run the code to confirm:

  1) ~mynumbers <- c(2,2,2,2,5,2)~

  2) ~mynumbers <- 2:20~

  3) ~mynumbers <- c(10,1,10,1,2)~

- To check, we have to re-initialize the counter and condition
  variables then run ~<<build_list>>:
  1) ~mynumbers <- c(2,2,2,2,5,2)~
     #+begin_src R
       mylist <- list()  # create an empty list to store all matrices
       counter <- 1      # set loop index counter variable to 1
       mynumbers <- c(2,2,2,2,5,2) # matrix dimensions
       mycondition <- mynumbers[counter] <= 5 # while loop condition
       <<build_list>>
     #+end_src

     #+RESULTS:
     #+begin_example
     [[1]]
          [,1] [,2]
     [1,]    1    0
     [2,]    0    1

     [[2]]
          [,1] [,2]
     [1,]    1    0
     [2,]    0    1

     [[3]]
          [,1] [,2]
     [1,]    1    0
     [2,]    0    1

     [[4]]
          [,1] [,2]
     [1,]    1    0
     [2,]    0    1

     [[5]]
          [,1] [,2] [,3] [,4] [,5]
     [1,]    1    0    0    0    0
     [2,]    0    1    0    0    0
     [3,]    0    0    1    0    0
     [4,]    0    0    0    1    0
     [5,]    0    0    0    0    1

     [[6]]
          [,1] [,2]
     [1,]    1    0
     [2,]    0    1
     #+end_example

  2) ~mynumbers <- 2:20~
     #+begin_src R
       mylist <- list()  # create an empty list to store all matrices
       counter <- 1      # set loop index counter variable to 1
       mynumbers <- 2:20 # matrix dimensions
       mycondition <- mynumbers[counter] <= 5 # while loop condition
       <<build_list>>
     #+end_src

     #+RESULTS:
     #+begin_example
     [[1]]
          [,1] [,2]
     [1,]    1    0
     [2,]    0    1

     [[2]]
          [,1] [,2] [,3]
     [1,]    1    0    0
     [2,]    0    1    0
     [3,]    0    0    1

     [[3]]
          [,1] [,2] [,3] [,4]
     [1,]    1    0    0    0
     [2,]    0    1    0    0
     [3,]    0    0    1    0
     [4,]    0    0    0    1

     [[4]]
          [,1] [,2] [,3] [,4] [,5]
     [1,]    1    0    0    0    0
     [2,]    0    1    0    0    0
     [3,]    0    0    1    0    0
     [4,]    0    0    0    1    0
     [5,]    0    0    0    0    1
     #+end_example

  3) ~mynumbers <- c(10,1,10,1,2)~
     #+begin_src R
       mylist <- list()  # create an empty list to store all matrices
       counter <- 1      # set loop index counter variable to 1
       mynumbers <- c(10,1,10,1,2) # matrix dimensions
       mycondition <- mynumbers[counter] <= 5 # while loop condition
       <<build_list>>
     #+end_src

     #+RESULTS:
     : list()

* Exercise - Factorials

- The factorial of a non-negative ~integer~ ~x~, expressed as ~x!~, refers
  to ~x~ multiplied by the product of all integers less than ~x~ down to
  ~1~: $x! = x \times (x-1) \times (x-2) \times \dots \times 1$. The 0th
  factorial is always ~1~: $0! = 1$.

- *Problem*: write a ~while~ loop that computes and stores as a new object
  the factorial of any non-negative ~integer~ ~mynum~ by decrementing
  ~mynum~ by ~1~ at each repetition of the braced code block.

- *Test*: using your loop, confirm the following:
  1) The result of ~mynum <- 5~ is ~120~.
  2) Using ~mynum <- 12~ yields ~479001600~
  3) Having ~mynum <- 0~ correctly returns ~1~

#+name: factorial
#+begin_src R
  mynum.fac <- 1
  while(mynum>1){
    mynum.fac <- mynum.fac*mynum
    mynum <- mynum-1
    cat("Number",mynum,"\n")
    cat("Factorial",mynum.fac,"\n")
  }
  mynum.fac
#+end_src

Test:
#+begin_src R :noweb yes
  mynum <- 5
  <<factorial>>
  mynum <- 12
  <<factorial>>
  mynum <- 0
  <<factorial>>
#+end_src

#+RESULTS:
#+begin_example
Number 4 
Factorial 5 
Number 3 
Factorial 20 
Number 2 
Factorial 60 
Number 1 
Factorial 120
[1] 120
Number 11 
Factorial 12 
Number 10 
Factorial 132 
Number 9 
Factorial 1320 
Number 8 
Factorial 11880 
Number 7 
Factorial 95040 
Number 6 
Factorial 665280 
Number 5 
Factorial 3991680 
Number 4 
Factorial 19958400 
Number 3 
Factorial 79833600 
Number 2 
Factorial 239500800 
Number 1 
Factorial 479001600
[1] 479001600
[1] 1
#+end_example

* TODO More exercises
#+attr_latex: :width 400px
[[../img/exercise.jpg]]

Download the *raw* exercise file [[https://github.com/birkenkrahe/ds2/tree/main/org][from GitHub]] and save it as
~6_loop_while_exercise.org~. When done, upload the file to Canvas.

* TODO Glossary

| TERM | MEANING |
|------+---------|
|      |         |

* References

- Davies, T.D. (2016). The Book of R. NoStarch Press.
