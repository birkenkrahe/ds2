#+TITLE: CODING LOOPS WITH "while" - LECTURE
#+AUTHOR: Marcus Birkenkrahe
#+SUBTITLE: DSC 205 - Advanced introduction to data science
#+STARTUP: overview hideblocks indent inlineimages
#+OPTIONS: toc:nil num:nil ^:nil
#+PROPERTY: header-args:R :session *R* :results output :exports both :noweb yes
#+attr_html: :width 300px
* README
#+attr_html: :width 300px
#+caption: Photo by La-Rel Easter on Unsplash
[[../img/5_loop.jpg]]

Download the *raw* practice file [[https://github.com/birkenkrahe/ds2/tree/main/org][from GitHub]] and save it as
~6_loop_while_practice.org~.

To test your Emacs mettle, open it on the CMD line with the command
~emacs -nw~ (no graphics - not needed for this exercise).

* ~while~ loops

- A ~while~ loop repeats code until a condition evaluates as ~FALSE~:
  #+begin_example R
  while (loopcondition) {
    do any code in here
  }
  #+end_example

- This means to avoid /infinite loops/, the operations in the braced
  area must cause the loop to exit.

- Exiting a loop works if either the /loopcondition// is ~FALSE~, or if a
  ~break~ command is met.

- To escape infinite loops in Emacs, enter ~C-g~ - in the ~Rterm~ or ~Rgui~
  console (outside Emacs) enter ~C-c~ or ~<ESC>~.

* Simple example

1) Set the condition variable ~myval~ to ~5~
2) Test if ~myval~ is less than ~10~
3) If it is, increase ~myval~ by ~1~
4) Print the current value of ~myval~ using ~cat~ on one line
5) Print the current value of the condition with ~cat~ on the next line
#+begin_src R
  myval <- 5
  while(myval<10) {
    myval <- myval + 1
    cat("\nmyval is now",myval,"\n")
    cat("condition is now",myval<10,"\n")
  }
#+end_src

* Extended example

- It is often useful to set the /loopcondition/ to be an object so that
  you can modify it inside the braced area.

- In the example, you will use a ~while~ loop to iterate over an ~integer~
  vector ~mynumbers~ and create an /identity matrix/ using ~diag~ with the
  dimension ~dim~ matching the current integer.

- The ~diag~ function extracts or replaces the diagonal of a matrix, or
  constructs a diagonal matrix. Check out its arguments:
  #+begin_src R
    args(diag)
  #+end_src

- To test the function, create a 3x2 matrix of ~0~ values ~m~ and then use
  ~diag~ to turn it into an /identity/ matrix.
  #+begin_src R
    m <- matrix(0,3,3)
    m
    diag(m) <- 1
    m
  #+end_src

- Create an empty list ~l~ and add a 2x2 identity matrix to it by
  overwriting the first element of ~l~ with ~diag(2)~
  #+begin_src R
    l <- list()
    l[[1]] <- diag(2)
    l
  #+end_src

- This loop should stop when it reaches a number in the vector
  ~mynumbers~ that's greater than ~5~, or when it reaches the end of the
  vector. The ~while~ condition is stored in a separate object
  ~mycondition~.

- Create a few initial objects first:
  #+name: initialize
  #+begin_src R :results silent
    mylist <- list()  # create an empty list to store all matrices
    counter <- 1      # set loop index counter variable to 1
    mynumbers <- c(4,5,1,2,6,2,4,6,6,2) # matrix dimensions
    mycondition <- mynumbers[counter] <= 5 # while loop condition
  #+end_src

- Create the loop:
  #+name: build_list
  #+begin_src R
    while (mycondition) {
      mylist[[counter]] <- diag(mynumbers[counter]) # add matrix to list
      counter <- counter + 1   # increase counter
      ## update loop condition
      if (counter <= length(mynumbers)) {
        mycondition <- mynumbers[counter] <= 5  # counter in bounds
      } else {
        mycondition <- FALSE   # counter out of bounds
      }
    }
    mylist
  #+end_src

- The result is a list ~mylist~ with four members because 4 is the last
  element of ~mynumbers~ not greater than 5. The identity matrices have
  dimension 4 x 4, 5 x 5, 1 x 1 and 2 x 2.

* Changing conditions

- Based on the extended example of storing identity matrices in a
  list, determine what the resulting ~mylist~ would look like for each
  of the following possible ~mynumbers~ vectors, without executing
  anything - then run the code to confirm:

  1) ~mynumbers <- c(2,2,2,2,5,2)~

  2) ~mynumbers <- 2:20~

  3) ~mynumbers <- c(10,1,10,1,2)~

- To check, we have to re-initialize the counter and condition
  variables then run ~<<build_list>>:
  1) ~mynumbers <- c(2,2,2,2,5,2)~
     #+begin_src R
       mylist <- list()  # create an empty list to store all matrices
       counter <- 1      # set loop index counter variable to 1
       mynumbers <- c(2,2,2,2,5,2) # matrix dimensions
       mycondition <- mynumbers[counter] <= 5 # while loop condition
       <<build_list>>
     #+end_src

  2) ~mynumbers <- 2:20~
     #+begin_src R
    mylist <- list()  # create an empty list to store all matrices
    counter <- 1      # set loop index counter variable to 1
    mynumbers <- 2:20 # matrix dimensions
    mycondition <- mynumbers[counter] <= 5 # while loop condition
    <<build_list>>
  #+end_src

  3) ~mynumbers <- c(10,1,10,1,2)~
     #+begin_src R
       mylist <- list()  # create an empty list to store all matrices
       counter <- 1      # set loop index counter variable to 1
       mynumbers <- c(10,1,10,1,2) # matrix dimensions
       mycondition <- mynumbers[counter] <= 5 # while loop condition
       <<build_list>>
     #+end_src

* TODO Exercises
#+attr_latex: :width 400px
[[../img/exercise.jpg]]

Download the *raw* exercise file [[https://github.com/birkenkrahe/ds2/tree/main/org][from GitHub]] and save it as
~6_loop_while_exercise.org~. When done, upload the file to Canvas.

* TODO Glossary

| TERM | MEANING |
|------+---------|
|      |         |

* References

- Davies, T.D. (2016). The Book of R. NoStarch Press.
