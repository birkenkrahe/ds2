#+TITLE: CODING LOOPS WITH "apply" - LECTURE
#+AUTHOR: Marcus Birkenkrahe
#+SUBTITLE: DSC 205 - Advanced introduction to data science
#+STARTUP: overview hideblocks indent inlineimages
#+OPTIONS: toc:nil num:nil ^:nil
#+PROPERTY: header-args:R :session *R* :results output :exports both :noweb yes
* README
#+attr_html: :width 400px
#+caption: Photo by Brett Jordan on Unsplash
[[../img/7_goforit.jpg]]

- Download the *raw* file to practice during the lecture [[https://github.com/birkenkrahe/ds2/tree/main/org][from GitHub]],
  save it as ~7_loop_apply_practice.org~ and upload it to Canvas later.

- To test your Emacs mettle, open it on the CMD line with the command
  ~emacs -nw~ (no graphics - not needed for this exercise).

* ~apply~, ~lapply~, ~sapply~, ~tapply~, ~vapply~, ~mapply~
#+attr_latex: :width 400px
#+caption: Family by Rajiv Perera on Unsplash
[[../img/7_family.jpg]]

- The ~apply~ family of functions allows implicit looping over subsets
  of vectors, matrices or arrays to apply a function a subset of their
  elements.

- The different flavors of ~apply~ are:
  1) ~apply~ applies a function to a dataset's margin (segment)
  2) ~tapply~ to apply a function to subsets defined in terms of ~factor~
     vectors, i.e. sliced by categorical variable values.
  3) ~lapply~ operates member by member on a ~list~.
  4) ~sapply~ to return simplified ~lapply~ results.
  5) ~vapply~ if you know the data type you're expecting as a return.
  6) ~mapply~ as a multi-variate version of ~sapply~

- All ~apply~ type functions simplify coding enormously by replacing ~for~
  loop constructions.

- All ~apply~ type functions allow for additional arguments (~...~) to be
  passed to ~FUN~. 

* ~apply~ - implicit looping over arrays

- The ~apply~ function returns a vector or array or list of values by
  applying a function to the ~MARGIN~ of an array or matrix.
  #+begin_example R
    apply( X = data  # array with positive dim(X)
           MARGIN = subset, # aka row/column/layer etc.
           FUN = function)  # includes your own function
  #+end_example

- Does ~apply~ have any other arguments? Find out!
  #+begin_src R
    args(apply)
  #+end_src

* What's an array?
#+attr_latex: :width 400px
#+caption: R data structures (source: Ceballos, 2013)
[[../img/7_arrays.png]]

- scalars: 0-dim arrays, e.g. the number ~0~
- vectors: 1-dim arrays, e.g. ~c("a","vector")~
- matrices: 2-dim arrays, e.g. ~matrix(1:9,3,3)~
- arrays: n-dim, e.g. ~array(1:9,dim=c(3,3,2))~
  #+begin_src R
    array(1:18,dim=c(3,3,2))
  #+end_src

- The ~MARGIN~ index follows the positional order of the dimension for
  matrices and arrays:
  | ~MARGIN~ | DATA STRUCTURE |
  |--------+----------------|
  |      1 | rows           |
  |      2 | columns        |
  |      3 | layers         |
  |      4 | blocks         |

* ~apply~ example: ~matrix~

- Create a 4 x 3 matrix with the elements ~1:12~:
  #+name: define_foo
  #+begin_src R
    foo <- matrix(1:12,4,3) # default byrow=FALSE
    foo
  #+end_src
- Find the sum of each row of ~foo~. What about ~sum(foo)~?
  #+begin_src R
    sum(foo)  # this sums up ALL elements
  #+end_src
- Loop over the rows of ~foo~:
  #+begin_src R
    row.totals <- rep(NA, times=nrow(foo)) # initialize counter
    for (i in 1:nrow(foo)) {
      row.totals[i] <- sum(foo[i,]) # sum over i-th row
    }
    row.totals
  #+end_src
- Much shorter with ~apply~:
  #+begin_src R
    apply(
      X = foo,
      MARGIN = 1, # MARGIN = 1 (rows), 2 (cols), 3 (layers), 4 (blocks)
      FUN = sum)
  #+end_src
- To ~sum~ over columns instead, change ~MARGIN~ to ~2~.
  #+begin_src R
    apply(
      X = foo,
      MARGIN = 2,
      FUN = sum)
  #+end_src

- You can pass additional arguments to any ~apply~ function: e.g. you
  can use the function ~sort~ and specify it to be ~decreasing~:
  #+begin_src R
    apply(
      X = foo,
      MARGIN = 1,
      FUN = sort,
      decreasing = TRUE)
  #+end_src

* ~apply~ example: ~array~

- Create a 3 x 2 x 2 array ~bar~ with the elements ~1:18~
  #+begin_src R
    bar <- array(1:18, dim=c(3,3,2))
    bar
  #+end_src

- Put differently, ~bar~ has 2 layers of 3 x 3 matrices. What does the
  following call do?[fn:1]
  #+begin_src R
    baz <- apply(bar,3,FUN=diag)
    baz
  #+end_src

- Check the dimensions and class of baz:
  #+begin_src R
    dim(baz)
    class(baz)
    is.matrix(baz)
    is.array(baz)
  #+end_src

* ~tapply~ - slicing data by categories

- ~tapply~ performs operations on subsets defined by ~factor~ vectors

- Simple example: compute the ~mean~ tooth length by supply category in
  the ~ToothGrowth~ dataset:
  #+begin_src R
    tapply(X = ToothGrowth$len,   # length of guinea pig teeth
           INDEX = ToothGrowth$supp,  # OJ or VC supply
           FUN = mean)   # arithmetic average
  #+end_src

- The result returns the average length for guinea pigs supplied with
  orange juice (~OJ~) and vitamin C (~VC~).

- Here's another example ([[https://www.kaggle.com/datasets/nancyalaswad90/diamonds-prices][data source: Kaggle]])[fn:2]:
  1) read web data on diamond pricing (with strings as factors)
  2) display structure of data table
  3) display first five records
  #+begin_src R
    dia.url <- "https://raw.githubusercontent.com/birkenkrahe/ds2/main/data/diamonds.csv"
    diamonds <- read.csv(dia.url, stringsAsFactors=TRUE)
    str(diamonds)
    head(diamonds)
  #+end_src

- Using ~tapply~, you can add up the total value of the diamonds for the
  full data set but separated according to ~color~ (key coded):
  #+begin_src R
    tapply(
      X = diamonds$price,
      INDEX = diamonds$color,
      FUN = sum)
  #+end_src

* ~lapply~ - cycling through lists

- ~lapply~ operates member by member on a ~list~ and returns a ~list~:
  #+name: define_list
  #+begin_src R
    baz <- list(
      aa = c(3.4,1),
      bb = matrix(1:4,2,2),
      cc = matrix(c(T,T,F,T,F,F),3,2),
      dd = "string here",
      ee = matrix(c("red","green","blue","yellow")))
  #+end_src
  
- Check for matrices in the list ~baz~:
  #+begin_src R 
    <<define_list>>
    lapply(
      X = baz,
      FUN = is.matrix)
  #+end_src

- No margin or index information is required. R knows how to apply ~FUN~
  to each member of the list, and returns a ~list~. Fun!
  
* ~sapply~ - simplified cycling

- ~sapply~ (s = "simplified") returns the same results as ~lapply~ but in
  an array form:
  #+begin_src R
    <<define_list>>
    sap <- sapply(
            X = baz,
            FUN = is.matrix)
    sap
    is.vector(sap)   # sap is a named vector
  #+end_src

- ~baz~ has a ~names~ attribute that is copies to the corresponding
  entries of the returned object:
  #+begin_src R
    attributes(sap)
    names(sap)
    str(sap)
  #+end_src

- If we did not have ~sapply~, you could ~unlist~ the result of ~lapply~:
  #+begin_src R
    unlist(lapply(baz,is.matrix))
    sapply(baz,is.matrix)
  #+end_src

* SOMEDAY ~vapply~ - simplified cycling with safety check

- Read the help file and [[https://www.r-bloggers.com/2020/10/why-you-should-use-vapply-in-r/][this tutorial]] (Treadway, 2020).

* SOMEDAY ~mapply~ - multivariate version of ~sapply~

- Read the help file and [[https://www.statology.org/r-mapply/][this tutorial]] (Zach, 2021).

* TODO Exercises
#+attr_latex: :width 400px
[[../img/exercise.jpg]]

1) Write an implicit loop that calculates the product of all the
   column elements of the matrix returned by the call to ~apply(foo, 1,
   sort, decreasing=TRUE)~ where ~foo~ is ~matrix(1:12,4.3)~.

   /Tip: To multiply numbers, you can use the function ~prod~./
   
2) Convert the following ~for~ loop to an implicit loop that does
   exactly the same thing. Here, ~t~ transposes its matrix argument.

   /Bonus: compare the results of the two operations without looking./

   #+begin_src R
     matlist <- list(
       matrix(c(T,F,T,T),2,2),
       matrix(c("a","c","b","z","p","q"),3,2),
       matrix(1:8,2,4))
     matlist # original list

     for (i in 1:length(matlist)) {
       matlist[[i]] <- t(matlist[[i]])
     }
     matlist  # transposed list
   #+end_src

* TODO Glossary

| TERM | MEANING |
|------+---------|
|      |         |

* References

- Ceballos, M. (2013). Data structure. URL: [[http://venus.ifca.unican.es/Rintro/dataStruct.html][venus.ifca.unican.es]].
- Davies, T.D. (2016). The Book of R. NoStarch Press.
- Treadway, A. (20 Oct 2020). Why you should use vapply in R. URL:
  [[https://theautomatic.net/2020/10/20/why-you-should-use-vapply-in-r/][theautomatic.net]].
- Zach (Dec 7, 2021). How to Use the mapply() Function in R (With
  Examples). URL: [[https://www.statology.org/r-mapply/][statology.org]].

* Footnotes
[fn:2]Astonishingly, some websites are trying to sell these (freely
available) data for US$100.00 ([[https://www.dataandsons.com/categories/product-lists/diamonds-dataset][see here]]).

[fn:1]The ~apply~ call extracts the diagonal elements for each of the 2
layers with ~diag~. Each call to ~diag~ of a matrix returns a vector and
these vectors are returned as columns of a new matrix.
