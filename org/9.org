* Example: ~warning~ and error ~stop~

- The function ~warn_test~ warns if its argument is less or equal than
  0, fixes the value and returns a fraction:
  #+name: warn_test
  #+begin_src R :results silent
    warn_test <- function(x) {
      if (x <= 0) {
        warning("Argument ",x," <= 0 - setting it to 1 and continuing")
        1 -> x
      }
      return (5/x)
    }
  #+end_src

- Test ~warn_test~ for x = -1, 0, 1, 5, 10 using ~sapply~:
  #+begin_src R
    <<warn_test>>

  #+end_src

- The function ~error_test~ stops when the condition is satisfied:
  #+name: error_test
  #+begin_src R :results silent
    error_test <- function(x) {
      if (x<=0) {
        stop("Argument ",x," <=0 - TERMINATING")
      }
      return (5/x)
    }
  #+end_src

- Test ~error_test~ for x = 10,5,0,-1 using ~sapply~:
  #+begin_src R
    <<error_test>>

  #+end_src

* Making Fibonacci safe

- In ~fibo_safe~ below, you add a ~warning~ and an error ~stop~, and call
  the previously defined recursive function ~fibo~ on the argument ~n~:
  #+name: fibo_safe
  #+begin_src R :results silent
    <<recursive_fibonacci>>
    fibo_safe <- function(n) {
      ## exception handling for values of n
      if (n<0) {
        ## issue a warning

        n * (-1) -> n
      } else if (n == 0) {
        ## throw an error and terminate

      }
      ## calling the external function and return result

    }
  #+end_src

- Call ~fibo_safe~ on this range of values: -5,-1,5,10:
  #+begin_src R
    <<fibo_safe>>

  #+end_src

- Call ~fibo_safe~ on 0:
  #+begin_src R
    <<fibo_safe>>

  #+end_src
