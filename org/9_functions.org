#+TITLE: Writing Your Own Functions
#+AUTHOR: Marcus Birkenkrahe
#+SUBTITLE:DSC205 Introduction to Advanced Data Science
#+STARTUP:overview hideblocks indent
#+OPTIONS: toc:nil num:nil ^:nil
#+PROPERTY: header-args:R :exports both :results output :session *R* :noweb yes :exports both
* README

- Creating ~function~ objects
- Using the ~return~ function
- Lazy argument evaluation
- Setting argument defaults
- Checking for missing arguments
- Dealing with ellipses (~...~)

* The ~function~ command

- Template:
  #+begin_example R
    function_name <- function (arg_1, arg_2, arg_3, ...) {
      do any code in here when function_name is called
      return (return_object)
      }
  #+end_example

- ~function_name~ can be any valid R object name

- You can use any number of arguments or none: ~function()~ like: ~ls()~,
  ~options()~, ~search()~, ~par()~, which can be subset and searched.

* Example: hello, world!

- The function arguments are not workspace objects. Check that:
  1) define a ~function~ named ~hello_world~
  2) no arguments
  3) ~return~ the string "hello world"
  4) call the function
  #+begin_src R
    hello_world <- function() {
      return ("hello world")
    }
    hello_world()
  #+end_src

  #+RESULTS:
  : [1] "hello world"

- Solution:
  #+name: hello_world
  #+begin_src R
    hello_world <- function() {
      return ("hello, world!")
    }
  #+end_src

- Modify ~hello_world~ - create a new function ~hello~ that takes a
  name as an argument and prints it to the screen:
  1) define a ~function~ named ~hello~
  2) ~hello~ should have one argument, ~name~
  3) ~return~ the ~name~ together with "Hello," using ~paste~
  4) call the function with your name as the (string) argument
  5) check if ~name~ is in the list of user-defined objects using ~any~
  #+begin_src R
    hello <- function(name) {
      return (paste("Hello,", name))
    }
    hello("Marcus")
    any(ls()=="name")
  #+end_src

  #+RESULTS:
  : [1] "Hello, Marcus"
  : [1] FALSE

- Solution:
  #+name: hello_name
  #+begin_src R
    hello <- function(name) {
      return (paste("Hello,", name))  # 'name' is local
    }
    hello("Marcus")
    any(ls() == "name")
  #+end_src

- Ask ChatGPT to create the function ~hello~ for you - very nice: it only
  returns the code not the detailed explanation.

  #+begin_src R
    any(ls()=="ask_chatgpt")
    args(ask_chatgpt)
  #+end_src

  #+RESULTS:
  : [1] TRUE
  : function (prompt)
  : NULL

  #+begin_src R
    any(ls() == "ask_chatgpt")
    ask_chatgpt("Write a 'hello' function in R that takes
                 my 'name' as input and returns
                 the message 'hello [name]'.")
  #+end_src

  #+RESULTS:
  : [1] TRUE
  : [1] "hello <- function(name) {\n  message <- paste(\"Hello \", name, \"!\", sep=\"\")\n  return(message)\n}\n\n# Example usage\nhello(\"John\")\n# Output: \"Hello John!\""

  #+begin_src R
    hello <- function(name) {
      message <- paste("Hello ", name, "!", sep="")
      return(message)
    }
    hello("Marcus")
  #+end_src

  #+RESULTS:
  : [1] "Hello Marcus!"

#+begin_src R
  ## ask_chatgpt("what's the command in R to define a function?\n")
#+end_src

* Example: Fibonacci sequence generator

- Remember the Fibonacci sequence generator (cut off at 150)?

- Pseudocode
  #+begin_example sh
   INITIALIZE SEQUENCE/COUNTER
   REPEAT
     INCREASE COUNTER
     COMPUTE NEW VALUE
     APPEND TO SEQUENCE
     CHECK IF VALUE > 150
  #+end_example

- R code block (named "fibonacci")
  #+name: fibonacci
  #+begin_src R :results output
    fib <- rep(NA,10); fib[2] <- fib[1] <- 1; i = 2 # initialize
    repeat { i <- i + 1 # counter
      append(fib,fib[i] <- fib[i-2] + fib[i-1]) # build sequence
      if (fib[i] > 150) break # break for values > 150
    }
    fib
  #+end_src

- Turn the Fibonacci sequence generator into a function ~myfib~:
  1) Use ~function~ to create the function ~myfib~
  2) Use << and >> to include the named code block above.
  3) Check the package environment with ~ls~
  4) Run the function ~myfib~
  #+begin_src R
    myfib <- function() {
      <<fibonacci>>
    }
    ls()
    myfib()
  #+end_src

  #+RESULTS:
  : [1] "api_key"     "ask_chatgpt" "fib"         "hello"       "i"
  : [6] "myfib"
  :  [1]   1   1   2   3   5   8  13  21  34  55  89 144 233

- Solution:
  #+begin_src R
    myfib <- function() {
      <<fibonacci>>
    }
    ls()
    myfib()
  #+end_src

* Adding arguments

- Modify ~myfib~ to take a single argument, ~threshold~, to ~break~ off
  the generator (e.g. ~threshold=150~):
  1) modify the code block "fib_threshold" below accordingly.
  2) create a code block for ~myfib2~ that takes the ~threshold~ argument
  3) ~return~ the result ~fib~
  4) search the list of user-defined objects for "myfib2"
  5) Run ~myfib2~ for ~threshold =~ 150, 250, 100000, 1000000
  6) Run the function individually first, then in a loop
  #+name: fib_threshold
  #+begin_src R
    fib <- rep(NA,10); fib[2] <- fib[1] <- 1; i = 2 # initialize
    repeat { i <- i + 1 # count up
      append(fib,fib[i] <- fib[i-2] + fib[i-1])
      if (fib[i] > ...) break # break for values > threshold
    }
  #+end_src
  #+begin_src R
    ## your solution here
  #+end_src
- Solution I: initialize
  #+name: initialize_fibonacci
  #+begin_src R
    fib <- rep(NA,10); fib[2] <- fib[1] <- 1; i = 2 # initialize
  #+end_src
- Solution II: function body
  #+name: fib_threshold_solution
  #+begin_src R
    <<initialize_fibonacci>>
    repeat { i <- i + 1 # count up
      append(fib,fib[i] <- fib[i-2] + fib[i-1])
      if (fib[i] > threshold) break # break for values > threshold
    }
  #+end_src

  #+RESULTS: fib_threshold_solution
  : Error in if (fib[i] > threshold) break : the condition has length > 1
- Solution III: function definition
  #+name: myfib2
  #+begin_src R
    myfib2 <- function(threshold) {
      <<fib_threshold_solution>>
      return (fib)
    }
    ls()
    myfib2(150)
    myfib2(250)
    myfib2(1e5)
    myfib2(1e6)
  #+end_src

  #+RESULTS: myfib2
  #+begin_example
  [1] "api_key"     "ask_chatgpt" "fib"         "hello"       "i"
  [6] "myfib"       "myfib2"      "threshold"
   [1]   1   1   2   3   5   8  13  21  34  55  89 144 233
   [1]   1   1   2   3   5   8  13  21  34  55  89 144 233 377
   [1]      1      1      2      3      5      8     13     21     34     55
  [11]     89    144    233    377    610    987   1597   2584   4181   6765
  [21]  10946  17711  28657  46368  75025 121393
   [1]       1       1       2       3       5       8      13      21      34
  [10]      55      89     144     233     377     610     987    1597    2584
  [19]    4181    6765   10946   17711   28657   46368   75025  121393  196418
  [28]  317811  514229  832040 1346269
  #+end_example
- Solution IV: (with loop) execution
  #+begin_src R
    ls()[which(ls()=="myfib2")]  # print function name if it's loaded
    ## define vector of arguments
    threshold <- c(150, 250, 1e5, 1e6);
    ## loop over threshold
    for (i in threshold) {
      print(myfib2(i))
    }
  #+end_src

  #+RESULTS:
  #+begin_example
  [1] "myfib2"
   [1]   1   1   2   3   5   8  13  21  34  55  89 144 233
   [1]   1   1   2   3   5   8  13  21  34  55  89 144 233 377
   [1]      1      1      2      3      5      8     13     21     34     55
  [11]     89    144    233    377    610    987   1597   2584   4181   6765
  [21]  10946  17711  28657  46368  75025 121393
   [1]       1       1       2       3       5       8      13      21      34
  [10]      55      89     144     233     377     610     987    1597    2584
  [19]    4181    6765   10946   17711   28657   46368   75025  121393  196418
  [28]  317811  514229  832040 1346269
  #+end_example

- Instead of the ~for~ loop, you can also use an ~apply~ function (to
  turn the result into a vector, use ~unlist~):
  #+begin_src R
    lapply(
      X=threshold,
      FUN=myfib2)
  #+end_src

  #+RESULTS:
  #+begin_example
   [1]       1       1       2       3       5       8      13      21      34
  [10]      55      89     144     233       1       1       2       3       5
  [19]       8      13      21      34      55      89     144     233     377
  [28]       1       1       2       3       5       8      13      21      34
  [37]      55      89     144     233     377     610     987    1597    2584
  [46]    4181    6765   10946   17711   28657   46368   75025  121393       1
  [55]       1       2       3       5       8      13      21      34      55
  [64]      89     144     233     377     610     987    1597    2584    4181
  [73]    6765   10946   17711   28657   46368   75025  121393  196418  317811
  [82]  514229  832040 1346269
  #+end_example

- Print only those results of ~myfib2(1e6)~ that are greater than 150
  and smaller than 500,000:
  1) Save ~myfib2(threshold=1e6)~ in an object ~foo~
  2) Subset ~foo~ so that only the range (150,500000) is printed
  #+begin_src R
    foo <- myfib2(1e6)
    foo
    subset(x=foo,
           foo>150 & foo <5e5)
    args(subset)
  #+end_src

  #+RESULTS:
  :  [1]       1       1       2       3       5       8      13      21      34
  : [10]      55      89     144     233     377     610     987    1597    2584
  : [19]    4181    6765   10946   17711   28657   46368   75025  121393  196418
  : [28]  317811  514229  832040 1346269
  :  [1]    233    377    610    987   1597   2584   4181   6765  10946  17711
  : [11]  28657  46368  75025 121393 196418 317811
  : function (x, ...)
  : NULL

* Using ~return~

- If there is no ~return~ statement inside a function, the function will
  end when the last line in the body has been run and return the most
  recently assigned or created object.

- If nothing is created, the function returns ~NULL~ (the empty object).

- Enter two dummy functions with some ~dummy_code~ then check ~ls()~:
  #+name: dummy_code
  #+begin_src R
    aa <- 2.5
    bb <- "string me along"
    cc <- "string 'em up"
    dd <- 4:8
  #+end_src
  #+begin_src R
    dummy1 <- function() {
      <<dummy_code>>
    }
    dummy2 <- function() {
      <<dummy_code>>
      return(dd)
    }
    ls()
  #+end_src

  #+RESULTS:
  :  [1] "api_key"     "ask_chatgpt" "dummy1"      "dummy2"      "fib"
  :  [6] "foo"         "hello"       "i"           "myfib"       "myfib2"
  : [11] "threshold"

- ~dummy1~ assigns four objects in its lexical (not global) environment.

- ~dummy2~ returns the value of ~dd~ to global but not the variable.

- Assign ~dummy1~ and ~dummy2~ to ~foo~ and ~bar~, respectively:
  #+begin_src R
    foo <- dummy1()
    foo
    bar <- dummy2()
    bar
  #+end_src

  #+RESULTS:
  : [1] 4 5 6 7 8
  : [1] 4 5 6 7 8

- Create a third function ~dummy3~ that returns ~aa~ and ~bb~ in two
  separate calls, then run the function:
  #+begin_src R
    dummy3 <- function() {
      aa <- 2.5
      bb <- "string me along"
      return (aa)
      cc <- "string 'em up"
      dd <- 4:8
      return (bb)
    }
    dummy3()
  #+end_src

  #+RESULTS:
  : [1] 2.5

- Only ~aa~ is returned because the function exits at that point. The
  last three lines will never be executed. ~return~ acts like a ~break~.

- Which code would return all four values?
  #+begin_src R
    dummy4 <- function() {
      <<dummy_code>>
      ...
    }
  #+end_src

- Solution:
  #+begin_src R
    dummy4 <- function() {
      <<dummy_code>>
      return (c(aa,bb,cc,dd))
    }
    return <- dummy4()
    return # all values are returned to global
    names(return) # the element names are lost to global
  #+end_src

  #+RESULTS:
  : [1] "2.5"             "string me along" "string 'em up"   "4"
  : [5] "5"               "6"               "7"               "8"
  : NULL

* Bonus exercise: write a factorial function

1) Complete the exercise and [[https://lyon.instructure.com/courses/1041/assignments/9232][submit it as an org-file in canvas]]. We
   already wrote the code for a factorial together, [[https://github.com/birkenkrahe/ds2/blob/main/org/6_loop_while.org#exercise---factorials][in this lesson]].

2) As a preparation, accept ~int~ as an argument to a function ~myfac~,
   set its default value to 1, then print ~int~ in the body of the
   function:
   #+begin_src R
     myfac <- function(int=1) print(int)
     myfac()
     myfac(5)
   #+end_src

4) Now expand ~myfac~ to include the computation of ~int!~ and test it for:
   1) 1! = 1
   2) 5! = 120
   3) 12! = 479,001,600
   4) 1! = 1

5) Reminder: the pseudocode for the function body is as follows:
   #+begin_example sh
   INITIALIZE fac as 1
   WHILE int GREATER 1
     fac * int -> fac   ## so int! = int * int-1 * int-2 * ...
     int - 1
   #+end_example

6) Solution:
   #+begin_src R
     ...
     ## test the function
     myfac()
     myfac(1)
     myfac(5)
     myfac(12)
     myfac(0)
   #+end_src

7) What happens if you remove the default and feed the function with a
   negative or non-integer value? Try it!

8) *Extension for extra points:* write another version of your
   factorial function, naming it ~myfac2~. This time, assume ~int~ will be
   supplied as an integer, but not that it will be non-negative. If
   negative, the function should return ~NaN~. Test it on the values 1,
   5, 12, 0, and -6.

9) FYI: R has a ~factorial~ function, defined via the Gamma function:
   #+begin_src R
     factorial(1)
     factorial(5)
     factorial(12)
     factorial(0)
     factorial(-6)
   #+end_src
