#+TITLE: FUNCTIONS - SPECIAL TOPICS
#+AUTHOR: Marcus Birkenkrahe
#+SUBTITLE:DSC205 Introduction to Advanced Data Science
#+STARTUP:overview hideblocks indent
#+OPTIONS: toc:nil num:nil ^:nil
#+PROPERTY: header-args:R :exports both :results output :session *R* :noweb yes
* README

This lecture and the accompanying practice file covers a number of
remaining topics to be able to write well-performing functions:

- Specialized functions
- Helper functions
- Disposable functions
- Recursive functions
- Exception handling
- Errors and warnings
- progress and timing

The treatment is necessarily brief, perhaps too brief. To go more
deeply into it, read a book.

* Special functions

We'll look at three types of special user-defined R functions:
1) /helper functions/, which support other functions
2) /disposable functions/, which are used in another function's call
3) /recursive functions/, which call themselves

* Helper functions

- Helper functions are written specifically to support computations
  carried out by another function, or to improve readability.

- Helper functions can be defined /internally/ within another function
  definition or /externally/ within the global R environment.

* Externally defined helper function

- Here is a new version of ~mult2~ (post-multiplication of matrices in a
  list with an argument matrix and with default string arguments):
  #+name: helper
  #+begin_src R
    helper <- function (x, matrix.flags, mat) {
      indices <- which(matrix.flags)
      counter <- 0
      result <- list()
      for (i in indices) {
        temp <- x[[i]]
        if (ncol(temp) == nrow(mat)) {
          counter <- counter + 1
          result[[counter]] <- temp %*% mat
        }
      }
      return (list(result,counter))
    }
  #+end_src

- We have isolated the core computation for the matrices (if there are
  any) including the compability check in another function definition.

- The original function is a lot shorter now, but it contains a call
  to the helper function:
  #+name: mult4
  #+begin_src R
    mult4 <- function (x, mat, str1="no matrix", str2="no valid matrix") {
      matrix.flags <- sapply(X=x, FUN=is.matrix)
      if (!any(matrix.flags)) return(str1)  # no matrices at all
      helper.call <- helper(x,matrix.flags,mat) # heavy lifting here
      result <- helper.call[[1]]
      counter <- helper.call[[2]]
      if (counter==0) return(str2) # no valid matrices
      return(result)
    }
  #+end_src

  #+RESULTS: mult4

- Test the code:
  #+begin_src R
    <<matrices>>
    <<helper>>
    <<mult4>>
    mult4(foo,diag(2)) # foo had two valid matrices (for multiplication)
    mult4(bar,diag(2)) # bar had no matrices at all
    mult4(baz,diag(2)) # baz had no valid matrix
  #+end_src

  #+RESULTS:
  #+begin_example
  [[1]]
       [,1] [,2]
  [1,]    1    3
  [2,]    2    4

  [[2]]
       [,1] [,2]
  [1,]    1    5
  [2,]    2    6
  [3,]    3    7
  [4,]    4    8
  [1] "no matrix"
  [1] "no valid matrix"
  #+end_example

- Check the global environment for all functions:
  #+begin_src R
    ls()
    search()
  #+end_src

  #+RESULTS:
  :  [1] "api_key"     "ask_chatgpt" "bar"         "baz"         "counter"
  :  [6] "fibseq"      "foo"         "helper"      "mult4"       "myfibplot"
  : [11] "myfibplot_"  "unpackme"
  :  [1] ".GlobalEnv"        "ESSR"              "package:stats"
  :  [4] "package:graphics"  "package:grDevices" "package:utils"
  :  [7] "package:datasets"  "package:stringr"   "package:httr"
  : [10] "package:methods"   "Autoloads"         "package:base"

* NEXT Exercise: "hello world" with helper

1) Write an external helper function ~hello_ext~ that takes an
   argument ~x~ and returns ~paste("Hello,",x)~
2) Write a function ~hello~ that takes an argument ~name~ with default
   value "world", calls the helper function on ~name~ and prints its
   return value.
3) Test the function both with and without an argument.
   #+name: hello_ext
   #+begin_src R
     ## hello_ext takes x and returns string "hello x"



     ## hello world with external helper call and argument (your name)



     ## make the call with and without your name as argument


   #+end_src

* Internally defined helper function

- If the helper is only used by one function then it makes more sense
  to defined it internally, within the /lexical/ environment of the
  function that calls it.

- This really only makes sense if the main function repeatedly calls
  the helper function so that we won't have to redo the code.

- Another version of our multiplication routine, this time with the
  helper integrated in the function body:
  #+name: mult5
  #+begin_src R
    mult5 <- function (x, mat, str1="no matrix", str2="no valid matrix") {
      matrix.flags <- sapply(x,is.matrix)
      if(!any(matrix.flags)) return(str1)
      ## internal helper function
      <<helper>>
      ## helper call
      helper.call <- helper(x,matrix.flags,mat) # heavy lifting
      result <- helper.call[[1]]
      counter <- helper.call[[2]]
      if (counter==0) return(str2) # no valid matrices
      return(result)
    }
  #+end_src

- Test the code:
  #+begin_src R
    <<matrices>>
    <<mult5>>
    mult5(foo,diag(2))
    mult5(bar,diag(2))
    mult5(baz,diag(2))
  #+end_src

* Disposable (anonymous) functions

- Disposable functions perform a simple, one-line task.

- ~apply~ is often used that way (with a simple ~FUN~ argument).

- Example: you want to repeat the columns of a ~numeric~ 3 x 4 ~matrix~
  twice and then ~sort~ its values:
  #+begin_src R
    foo <- matrix (c(2,3,3,4,2,4,7,3,3,6,7,2),3,4)
    foo
  #+end_src

- ~apply~ with ~MARGIN=2~ applies a function to every column of its target
  data. The anonymous (i.e. non-named) function is defined inside ~FUN~:
  #+begin_src R
    apply(X = foo, MARGIN = 2,
          FUN = function(x) { sort(rep(x,2))})
  #+end_src

  #+RESULTS:
  :      [,1] [,2] [,3] [,4]
  : [1,]    2    2    3    2
  : [2,]    2    2    3    2
  : [3,]    3    4    3    6
  : [4,]    3    4    3    6
  : [5,]    3    4    7    7
  : [6,]    3    4    7    7

- If we only had one function to perform (e.g. ~sort~), there would have
  been no need for the anonymous function but as soon as we want to
  nest functions, we need it.

- ~apply~ with ~sort~ alone:
  #+begin_src R
    apply(X = foo, MARGIN = 2,
          FUN = sort)
  #+end_src

- Now with ~rep~ nested inside ~sort~: error!
  #+begin_src R
    apply(X = foo, MARGIN = 2,
          FUN = sort(rep(foo,2)))
  #+end_src

* Recursive functions

- /Recursion/ happens when a function calls itself. This is not often
  used in statistical analysis but you need to be aware of it.

- [[https://nostarch.com/recursive-book-recursion][Here is a GREAT, FUN BOOK]] to learn more about recursion using Python
  and JavaScript by Al Sweigart (2022): "The Recursive Book of
  Recursion - Ace the Coding Interview with Python and
  JavaScript". Also [[https://inventwithpython.com/recursion/][available legally for free]] online [fn:1].

* Example: Fibonacci sequence recursively

- You can build up a Fibonacci sequence not just /iteratively/ by using
  a loop, but /recursively/: the function calls itself instead of
  looping over subsequent terms.

- The function ~fibo~ calls itself on all terms ~n~ except 1 and 2:
  #+name: recursive_fibonacci
  #+begin_src R
    fibo <- function(n) {
      if (n==1 | n==2) return(1) ## stopping condition
      return (fibo(n-1) + fibo(n-2))
    }
  #+end_src

- Call it for the argument values 1 through 10 and print the result
  (you know at least 2 ways how to do this):
  #+begin_src R
    <<recursive_fibonacci>>

  #+end_src

- Without the stopping condition, ~fibo~ would call itself forever. As
  soon as it reaches a call for the 1st or 2nd term, it will stop.

- Negative ~n~ will break this definition: call ~fibo~ for ~-1~.
  #+begin_src R
    <<recursive_fibonacci>>

  #+end_src

- For many sort and search algorithms, recursion is most
  efficient. For the Fibonacci sequence, the overhead is forbidding as
  the illustration of the subsequent calls shows:
  #+attr_latex: :width 400px
  [[../img/9_recursion.png]]

* Exception handling
#+attr_latex: :width 400px
#+caption: Warning flag (1946). Source: Flickr.com (State Library of NSW)
[[../img/9_warning.jpg]]

- How to make functions throw an error or warning when receiving
  unexpected input

- When there's an unexpected problem during execution of a function, R
  will notify you with a /warning/ or an /error/. This is called /exception
  handling/.

- Even standard functions in different languages differ considerably
  when it comes to handling exceptions. C for example has NONE.

- You will want to build this functionality into your own user-defined
  functions.

* Errors and warnings

- An /error/ forces the function to terminate immediately when it occurs.

- A /warning/ indicates an issue but the function will continue to run.

- In R, you can issue a warning with the ~warning~ command and you can
  "throw errors" (like knives) with the ~stop~ command.

* Example: ~warning~ and error ~stop~

- The function ~warn_test~ warns if its argument is less or equal than
  0, fixes the value and returns a fraction:
  #+name: warn_test
  #+begin_src R :results silent
    warn_test <- function(x) {
      if (x <= 0) {
        warning("Argument ",x," <= 0 - setting it to 1 and continuing")
        1 -> x
      }
      return (5/x)
    }
  #+end_src

  #+RESULTS: warn_test

- Test ~warn_test~ for x = -1, 0, 1, 5, 10 using ~sapply~:
  #+begin_src R
    <<warn_test>>

  #+end_src

- The function ~error_test~ stops when the condition is satisfied:
  #+name: error_test
  #+begin_src R :results silent
    error_test <- function(x) {
      if (x<=0) {
        stop("Argument ",x," <=0 - TERMINATING")
      }
      return (5/x)
    }
  #+end_src

- Test ~error_test~ for x = 10,5,0,-1 using ~sapply~:
  #+begin_src R
    <<error_test>>

  #+end_src
* Making Fibonacci safe

- In ~fibo_safe~ below, you add a ~warning~ and an error ~stop~, and call
  the previously defined recursive function ~fibo~ on the argument ~n~:
  #+name: fibo_safe
  #+begin_src R :results silent
    <<recursive_fibonacci>>
    fibo_safe <- function(n) {
      ## exception handling for values of n
      if (n<0) {
        ## issue a warning

        n * (-1) -> n
      } else if (n == 0) {
        ## throw an error and terminate

      }
      ## calling the external function and return result

    }
  #+end_src

- Call ~fibo_safe~ on this range of values: -5,-1,5,10:
  #+begin_src R
    <<fibo_safe>>

  #+end_src

- Call ~fibo_safe~ on 0:
  #+begin_src R
    <<fibo_safe>>

  #+end_src

* TODO Debugging tools
* TODO Progress, timing and masking
* TODO Exercises
#+attr_latex: :width 400px
#+caption: Women working on an aircraft fuselage, 1943 (Flickr.com)
[[../img/practice.jpg]]

* Resources

- Matrix definitions for the special functions demonstration:
  #+name: matrices
  #+begin_src R :results silent
    foo <- list(matrix(1:4,2,2),
                "not a matrix",
                "definitely not a matrix",
                matrix(1:8,2,4),
                matrix(1:8,4,2))
    bar <- list(1:4,
                "not a matrix",
                c(F,T,T,T),
                "??")
    baz <- list(1:4,
                "not a matrix",
                c(F,T,T,T),
                "??",
                matrix(1:8,2,4))
  #+end_src

* Solutions
** Check the global environment for all functions
#+begin_src R
  ls()
#+end_src

** External helper for ~hello~
1) Write an external helper function ~hello_ext~ that takes an
   argument ~x~ and returns ~paste("Hello,",x)~
2) Write a function ~hello~ that takes an argument ~name~ with default
   value "world", calls the helper function on ~name~ and prints its
   return value.
3) Test the function both with and without an argument.
   #+begin_src R
     ## hello_ext takes x and returns string "hello x"
     hello_ext <- function(x) {
       return(paste("Hello,", x))
     }
     ## hello world with external helper call
     hello <- function(name="world") {
       return(hello_ext(name))
     }
     ## make the call with and without your name as argument
     hello()
     hello("Marcus")
   #+end_src

   #+RESULTS:
   : [1] "Hello, world"
   : [1] "Hello, Marcus"

** Recursive Fibonacci
- Call it for the argument values 1 through 10 and print the result:
  #+begin_src R
    <<recursive_fibonacci>>
    for (i in 1:10)
      print(fibo(i))
    sapply(1:10,fibo)
  #+end_src

  #+RESULTS:
  #+begin_example
  [1] 1
  [1] 1
  [1] 2
  [1] 3
  [1] 5
  [1] 8
  [1] 13
  [1] 21
  [1] 34
  [1] 55
   [1]  1  1  2  3  5  8 13 21 34 55
  #+end_example

** Example: ~warning~ and error ~stop~

- Test ~warn_test~ for x = -1, 0, 1, 5 using ~sapply~:
  #+begin_src R
    <<warn_test>>
    sapply(X=c(-1,0,1,5,10), FUN=warn_test)
  #+end_src

  #+RESULTS:
  : [1] 5.0 5.0 5.0 1.0 0.5
  : Warning messages:
  : 1: In FUN(X[[i]], ...) : Argument -1 <= 0 - setting it to 1 and continuing
  : 2: In FUN(X[[i]], ...) : Argument 0 <= 0 - setting it to 1 and continuing

- Test ~error_test~ for x = 10,5,0,-1 using ~sapply~:
  #+begin_src R
    <<error_test>>
    sapply(X=c(10,5,0,-1), FUN=error_test)
  #+end_src

  #+RESULTS:
  : Error in FUN(X[[i]], ...) : Argument 0 <=0 - TERMINATING

** Making Fibonacci safe
- Add ~warning~ and ~stop~ commands:
  #+name: fibo_safe_
  #+begin_src R :results silent
    <<recursive_fibonacci>>
    fibo_safe_ <- function(n) {
      ## exception handling for values of n
      if (n<0) {
        warning("Did you mean ",n," to be > 0? I'll fix it")
        n * (-1) -> n
      } else if (n == 0) {
        stop("Cannot continue at n= ",n)
      }
      ## calling the external function
      return (fibo(n))
    }
  #+end_src

- Call ~fibo_safe~ on this range of values: -5,-1,5,10:
  #+begin_src R
    <<fibo_safe_>>
    sapply(c(-5,-1,5,10), fibo_safe_)
  #+end_src

  #+RESULTS:
  : [1]  5  1  5 55
  : Warning messages:
  : 1: In FUN(X[[i]], ...) : Did you mean -5 to be > 0? I'll fix it
  : 2: In FUN(X[[i]], ...) : Did you mean -1 to be > 0? I'll fix it

- Call ~fibo_safe~ on 0:
  #+begin_src R
    <<fibo_safe_>>
    fibo_safe_(0)
  #+end_src

  #+RESULTS:
  : Error in fibo_safe_(0) : Cannot continue at n= 0
* Code glossary

| COMMAND  | MEANING                      |
|----------+------------------------------|
| ~function~ | Create a function            |
| ~return~   | Return objects from function |
| ~missing~  | Check arguments              |
| ~...~      | Ellipsis (variable) argument |

* References

Sweigart (2019). Automate the Boring Stuff with Python. NoStarch.

Sweigart (2022). The Recursive Book of Recursion. NoStarch.

* Footnotes

[fn:1]This is also the author whose "[[https://nostarch.com/automatestuff2][Automate the Boring Stuff with
Python]]" will be the basis of my first introduction to programming with
Python (CSC 109) course this summer!
