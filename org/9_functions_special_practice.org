#+TITLE: SPECIAL FUNCTION - CODEALONG PRACTICE FILE
#+AUTHOR: Marcus Birkenkrahe
#+SUBTITLE:DSC205 Introduction to Advanced Data Science
#+STARTUP:overview hideblocks indent
#+OPTIONS: toc:nil num:nil ^:nil
#+PROPERTY: header-args:R :exports both :results output :session *R* :noweb yes
* TODO UPDATE #+AUTHOR NAME AND PLEDGE!
* Externally defined helper function

- Here is a new version of ~mult2~ (post-multiplication of matrices in a
  list with an argument matrix and with default string arguments):
  #+name: helper
  #+begin_src R
    helper <- function (x, matrix.flags, mat) {
      indices <- which(matrix.flags)
      counter <- 0
      result <- list()
      for (i in indices) {
        temp <- x[[i]]
        if (ncol(temp) == nrow(mat)) {
          counter <- counter + 1
          result[[counter]] <- temp %*% mat
        }
      }
      return (list(result,counter))
    }
  #+end_src

- The original function is a lot shorter now, but it contains a call
  to the helper function:
  #+name: mult4
  #+begin_src R
    mult4 <- function (x, mat, str1="no matrix", str2="no valid matrix") {
      matrix.flags <- sapply(X=x, FUN=is.matrix)
      if (!any(matrix.flags)) return(str1)  # no matrices at all
      helper.call <- helper(x,matrix.flags,mat) # heavy lifting here
      result <- helper.call[[1]]
      counter <- helper.call[[2]]
      if (counter==0) return(str2) # no valid matrices
      return(result)
    }
  #+end_src

- Test the code:
  #+begin_src R
    <<matrices>>
    <<helper>>
    <<mult4>>

  #+end_src

- Check the global environment for all functions:
  #+begin_src R

  #+end_src

* Exercise: "hello world" with helper

1) Write an external helper function ~hello_ext~ that takes an
   argument ~x~ and returns ~paste("Hello,",x)~
2) Write a function ~hello~ that takes an argument ~name~ with default
   value "world", calls the helper function on ~name~ and prints its
   return value.
3) Test the function both with and without an argument.
   #+name: hello_ext
   #+begin_src R
     ## hello_ext takes x and returns string "hello x"



     ## hello world with external helper call



     ## make the call with and without your name as argument


   #+end_src

* Internally defined helper function

- Another version of our multiplication routine, this time with the
  helper integrated in the function body:
  #+name: mult5
  #+begin_src R
    mult5 <- function (x, mat, str1="no matrix", str2="no valid matrix") {
      matrix.flags <- sapply(x,is.matrix)
      if(!any(matrix.flags)) return(str1)
      ## internal helper function
      <<helper>>
      ## helper call
      helper.call <- helper(x,matrix.flags,mat) # heavy lifting
      result <- helper.call[[1]]
      counter <- helper.call[[2]]
      if (counter==0) return(str2) # no valid matrices
      return(result)
    }
  #+end_src

- Test the code:
  #+begin_src R
    <<matrices>>
    <<mult5>>

  #+end_src

* Disposable (anonymous) functions

- Example: you want to repeat the columns of a ~numeric~ 3 x 4 ~matrix~
  twice and then ~sort~ its values:
  #+begin_src R
    foo <- matrix (c(2,3,3,4,2,4,7,3,3,6,7,2),3,4)
    foo
  #+end_src

- ~apply~ with ~MARGIN=2~ applies a function to every column of its target
  data. The anonymous (i.e. non-named) function is defined inside ~FUN~:
  #+begin_src R

    
  #+end_src

- ~apply~ with ~sort~ alone:
  #+begin_src R

  #+end_src

- Now with ~rep~ nested inside ~sort~: error!
  #+begin_src R

  #+end_src

* Recursion: book recommendation

- [[https://nostarch.com/recursive-book-recursion][Here is a GREAT, FUN BOOK]] to learn more about recursion using Python
  and JavaScript by Al Sweigart (2022): "The Recursive Book of
  Recursion - Ace the Coding Interview with Python and
  JavaScript". Also [[https://inventwithpython.com/recursion/][available legally for free]] online.

* Example: Fibonacci sequence recursively

- The function ~fibo~ calls itself on all terms ~n~ except 1 and 2:
  #+name: recursive_fibonacci
  #+begin_src R
    fibo <- function(n) {
      if (n==1 | n==2) return(1) ## stopping condition
      return (fibo(n-1) + fibo(n-2))
    }
  #+end_src

- Call it for the argument values 1 through 10 and print the result:
  #+begin_src R
    <<recursive_fibonacci>>

  #+end_src

- Negative ~n~ will break this definition: call ~fibo~ for ~-1~.
  #+begin_src R
    <<recursive_fibonacci>>

  #+end_src

* Example: ~warning~ and error ~stop~

- The function ~warn_test~ warns if its argument is less or equal than
  0, fixes the value and returns a fraction:
  #+name: warn_test
  #+begin_src R :results silent
    warn_test <- function(x) {
      if (x <= 0) {
        warning("Argument ",x," <= 0 - setting it to 1 and continuing")
        1 -> x
      }
      return (5/x)
    }
  #+end_src

- Test ~warn_test~ for x = -1, 0, 1, 5, 10 using ~sapply~:
  #+begin_src R
    <<warn_test>>

  #+end_src

- The function ~error_test~ stops when the condition is satisfied:
  #+name: error_test
  #+begin_src R :results silent
    error_test <- function(x) {
      if (x<=0) {
        stop("Argument ",x," <=0 - TERMINATING")
      }
      return (5/x)
    }
  #+end_src

- Test ~error_test~ for x = 10,5,0,-1 using ~sapply~:
  #+begin_src R
    <<error_test>>

  #+end_src

* Making Fibonacci safe

- In ~fibo_safe~ below, you add a ~warning~ and an error ~stop~, and call
  the previously defined recursive function ~fibo~ on the argument ~n~:
  #+name: fibo_safe
  #+begin_src R :results silent
    <<recursive_fibonacci>>
    fibo_safe <- function(n) {
      ## exception handling for values of n
      if (n<0) {
        ## issue a warning

        n * (-1) -> n
      } else if (n == 0) {
        ## throw an error and terminate

      }
      ## calling the external function and return result

    }
  #+end_src

- Call ~fibo_safe~ on this range of values: -5,-1,5,10:
  #+begin_src R
    <<fibo_safe>>

  #+end_src

- Call ~fibo_safe~ on 0:
  #+begin_src R
    <<fibo_safe>>

  #+end_src

* Resources

- Matrix definitions for the special functions demonstration:
  #+name: matrices
  #+begin_src R :results silent
    foo <- list(matrix(1:4,2,2),
                "not a matrix",
                "definitely not a matrix",
                matrix(1:8,2,4),
                matrix(1:8,4,2))
    bar <- list(1:4,
                "not a matrix",
                c(F,T,T,T),
                "??")
    baz <- list(1:4,
                "not a matrix",
                c(F,T,T,T),
                "??",
                matrix(1:8,2,4))
  #+end_src

