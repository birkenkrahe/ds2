#+TITLE: Agenda - Introduction to advanced data science
#+AUTHOR: Marcus Birkenkrahe
#+SUBTITLE: Lyon College, Spring 2023
#+STARTUP:overview hideblocks indent inlineimages
#+OPTIONS: toc:nil num:nil ^:nil
#+PROPERTY: header-args:R :session *R* :results output :exports both :noweb yes
* Week 1: Course overview & R review
#+attr_html: :width 400px
[[../img/cover.jpg]]

- [X] Course overview - assignments, grading, topics, platforms
- [X] Interesting webinar: "[[https://www.datacamp.com/webinars/2023-data-trends-and-predictions][Data Trends & Predictions 2023]]" report
  ([[https://github.com/birkenkrahe/ds2/blob/main/pdf/data_trends_2023.pdf][PDF]]) (Wed Jan 18, 10AM) - register/attend/watch the recording later
- [X] Calling R functions: scoping, environment, search path

** Week 1 review

- [X] What're topic and deliverables of your final project?[fn:1]
- [X] Running R inside Emacs - what's the meaning of ~:session~ ?[fn:2]
- [X] What is in R's "Global environment"? How to show it?[fn:3]

* Week 2: Scoping
#+attr_html: :width 400px
[[../img/scope.jpg]]

Review and preview:
- [X] [[https://www.thedataincubator.com/blog/events/how-git-works-webinar/][Webinar on how to use Git @The Data Incubator, Jan 25, 12 pm]]
- [X] [[https://github.com/birkenkrahe/ds2/blob/main/pdf/data_trends_2023.pdf][Data Trends and Predictions 2023]]
- [X] Week 1 review
- [ ] Project sprint review 1 due February 6 - *proposal*

Lecture and practice:
- [X] Classroom exercises: scoping
- [ ] Argument matching: exact, partial, positional, mixed

Submissions and tests:
- [X] Complete ~1_scoping_practice_2.org~: [[https://tinyurl.com/n8rc5kab][tinyurl.com/n8rc5kab]]
- [X] Next week: DataCamp, Test 1, 2 practice files uploaded
- [X] Test 1 will include questions on the DataCamp lesson

*Not in DataCamp yet*: Pedro, Jackson, Boogie! ([[https://www.datacamp.com/groups/shared_links/7fa27084d362490de257e18893dda59b3de61b2f0dcd9463fcb96c9d1782672d][Link]])
** Data trends and predictions 2023
#+attr_html: :width 400px
[[../img/copilot.png]]

*Familiarize yourself with ChatGPT (and CoPilot):*
1. Large language models will transform coding workflows
2. Generative AI will transform content creation and generation
3. AI will fuel productivity increases across a range of professions

*Invest in Literate programming:*
1. Next generation of notebooks closer to low-code data products
2. Increased focus on model explainability and data ethics

*Learn to control the infrastructure:*
1. Data observability drives trust in data / accelerates data culture
2. Innovation in tooling puts conceptual knowledge at the center

*Think a little more about your career options:*
1. Recession-proof industries safe haven for analytics professionals
2. Rise of specialist new roles signals a maturing role ecosystem
3. Organizations and institutions continue to invest in data literacy

* Week 3: Argument matching
#+attr_html: :width 400px
[[../img/0_argument.jpg]]

Review and preview:
- [X] Test 1 (online in class, Mon 1pm-1.15pm)
- [X] [[https://lyon.instructure.com/courses/1041/assignments/6557?display=full_width][Test 1 review]]
- [X] Project sprint review 1 due February 6 - *proposal*
- [ ] DataCamp lesson review questions

Lecture and practice:
- [X] Argument matching: exact, partial, positional, mixed
- [X] +Classroom+ exercises: argument matching, conditions
- [ ] Conditions: ~if~ and ~else~ statements

Submissions and tests:
- [ ] Complete practice files and upload them to Canvas
- [ ] Next week: DataCamp 2, Test 2, Sprint Review 1
- [ ] Tests include questions from the DataCamp lesson

** TODO [[https://lyon.instructure.com/courses/1041/assignments][Upload your practice files! (By Friday)]]
** DONE Condition for repeating tests
#+attr_latex: :width 400px
#+caption: Late or missed the test? Talk to me!
[[../img/late.jpg]]

- If you inform me beforehand that you cannot attend an announced
  test, we can make arrangements for you to take the test outside of
  class.

** DONE Project - first sprint review (Monday, Feb 6)
#+attr_html: :width 400px
[[../img/sprint.png]]

- The term project purpose is the exploration of any R package or
  (linked) group of packages.

- There are many different ways to explore and/or document a package - e.g. succinct, verbose, opinionated, objective, accessible or not.

- Your first deliverable is a project proposal formatted as an
  Org-mode file. Here is a template for such a file with definitions.

  1) Meta data: preliminary title (~#+TITLE~), list of team members
     (~#+AUTHOR:~), course title (~#+SUBTITLE~).

  2) Headlines: ~Problem~, ~Reason~, ~Constraints~, ~Goals and Non-goals~,
     ~Metrics~, ~References~

     - *Problem*: describe the problem that you're trying to solve.

     - *Reason*: why is this problem interesting (to you) right now?

     - *Constraints:* which difficulties, e.g. technical or conceptual,
       do you foresee right now?

     - *Goals and non-goals*: list all goals that you might want to
       achieve with this project. Order the goals by importance. Add a
       list of non-goals, i.e. things that are outside the scope of
       your project.

     - *Metrics*: how would you measure the success of your project?

     - *References*: list any references that you found already. Make
       sure that they are consistent (same format) and complete
       (author, date, title, place).

- Upload your result to Canvas (*no later than Feb 6, 12 pm*). Missing
  the deadline will cost you points.

  Source: Ellis, Data Science Project Proposals (2021). URL:
  [[https://crunchingthedata.com/data-science-project-proposals/][crunchingthedata.com]].

* Week 4: Conditional statements I
#+attr_latex: :width 400px
[[../img/groundhog.jpg]]
** Summary of assignments
#+attr_latex: :width 400px
[[../img/winter.jpg]]

- [[https://lyon.instructure.com/courses/1041/assignments/6693][DataCamp assignment 2]] is due on Friday Feb-3 at 1 pm
- [[https://lyon.instructure.com/courses/1041/assignments/6419][Test 2 is available now]] -  complete it by Monday, Feb-6, 12 pm.
- Submit your project proposal by February 6, 12 pm [[https://lyon.instructure.com/courses/1041/assignments/6741][here in Canvas]].

** DONE Exercise: argument matching (home)
** DONE Upload your practice files to GDrive
** DONE Review: DataCamp lesson "Conditional statements"
1) [ ] What's the result of using a relational operator in R?
   #+begin_src R
     1 > 2 # relational operators lead to LOGICAL values
   #+end_src
2) [ ] What's the result of using such an operator on a vector?
   #+begin_src R
     c(1,2) > c(2,1)
   #+end_src

   #+RESULTS:
   : [1] FALSE  TRUE

3) [ ] What is ~foo==0~ if ~foo <- 1:10~ ? What is ~sum(foo==0)~?
   #+begin_src R
     foo <- 1:10
     foo
     foo==0
     sum(foo == 0)
   #+end_src

   #+RESULTS:
   :  [1]  1  2  3  4  5  6  7  8  9 10
   :  [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
   : [1] 0

4) [ ] What is ~foo[-10] < foo~ if ~foo <- 1:10~?
   #+begin_src R :results output
     foo[-10]  # remove the value of the element indexed as 10
     foo
     foo[-10] < foo
   #+end_src

   #+RESULTS:
   : [1] 1 2 3 4 5 6 7 8 9
   :  [1]  1  2  3  4  5  6  7  8  9 10
   :  [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE
   : Warning message:
   : In foo[-10] < foo :
   :   longer object length is not a multiple of shorter object length

5) [ ] Can I write ~m < 4~ even if ~m~ is a ~numeric~ ~matrix~?
   #+begin_src R  :results output
     matrix(1:9,nr=3,byrow=TRUE) < 4

   #+end_src
   #+RESULTS:
   :       [,1]  [,2]  [,3]
   : [1,]  TRUE  TRUE  TRUE
   : [2,] FALSE FALSE FALSE
   : [3,] FALSE FALSE FALSE

6) [ ] Can I write ~m & 4~ even if ~m~ is a ~numeric~ ~matrix~?
   #+begin_src R  :results output
     matrix(1:9,nr=3,byrow=TRUE) & 4 # values != 0 count as TRUE
     TRUE & 4
     1 & 4
     0 & 4
   #+end_src

   #+RESULTS:
   :      [,1] [,2] [,3]
   : [1,] TRUE TRUE TRUE
   : [2,] TRUE TRUE TRUE
   : [3,] TRUE TRUE TRUE
   : [1] TRUE
   : [1] TRUE
   : [1] FALSE

7) [ ] What's the difference between ~|~ and ~||~?
   #+begin_src R :results output
     TRUE | FALSE
     c(TRUE,FALSE) | c(FALSE,FALSE)
     c(TRUE,FALSE) || c(FALSE,FALSE)
   #+end_src

   #+RESULTS:
   : [1] TRUE
   : [1]  TRUE FALSE
   : [1] TRUE
   : Warning message:
   : In c(TRUE, FALSE) || c(FALSE, FALSE) :
   :   'length(x) = 2 > 1' in coercion to 'logical(1)'

8) [ ] What's the problem with this code? (It should print "hello".)
   #+begin_src R
     x <- 0
     if (x=0) print("hello")
   #+end_src
9) [ ] Why does this code print "ciao" but not "hello"?
   #+begin_src R
     x <- 1
     if (x < 2) {
       print ("ciao")
     } else if (x == 1) {
       print("hello")
     }
   #+end_src

   #+RESULTS:
   : [1] "ciao"

** DONE [[https://blog.rwhitedwarf.com/post/use_emacs_for_r/][Using Emacs for R]]
#+attr_latex: :width 400px
[[../img/learning-editors.jpg]]
** DONE [[https://github.com/birkenkrahe/ds2/blob/main/org/3_conditions.org][Lecture]] & practice: conditional statements
* Week 5: Conditional statements II & Test 3
#+attr_latex: :width 400px
#+caption: February 16, 1923, Tutankhamun's burial chamber found
[[../img/mummy.jpg]]
[[https://www.onthisday.com/photos/tutankhamuns-burial-chamber-found][Image: onthisday.com]]

- [X] [[https://lyon.instructure.com/courses/1041/assignments/7087][You need to upload in-class practice files on time for points!]]
- [X] [[https://lyon.instructure.com/courses/1041/assignments/6741][Sprint review 1 due Monday February 6, 12 pm]] (Canvas)
- [X] [[https://github.com/birkenkrahe/ds2/blob/main/org/3_ifelse.org][Lecture on conditional statements (continued)]] (GitHub)
- [X] [[https://lyon.instructure.com/courses/1041/assignments/7087][Complete practice file: 3_ifelse_practice.org]] (Canvas)
- [X] [[https://lyon.instructure.com/courses/1041/assignments/7090][Complete class exercise: 3_ifelse_exercise.org]] (Canvas)
- [X] [[https://lyon.instructure.com/courses/1041/assignments/7091][Complete bonus programming exercise: 3_ifelse_bonus.org]] (Canvas)
- [X] [[https://lyon.instructure.com/courses/1041/assignments/7087][Complete practice file: 4_switch_practice.org]] (Canvas)
- [ ] [[https://lyon.instructure.com/courses/1041/assignments/7090][Complete class exercise: 4_switch_exercise.org]] (45 min) (Canvas)
** DONE Get bonus points when practicing

#+attr_latex: :width 200px
[[../img/datacamp2.png]]
- You can get 10 bonus points if you keep a practice streak of 10 days
- You can do this up to 3 times for a maximum of 30 points, which will
  be applied to your weakest final grade category
- Submit a screenshot of your mobile (or desktop) streak in Canvas
- If you lose your streak between day 5 and 10, you still get 5 points
- On the dashboard, DataCamp will suggest practice categories for you,
  and also in the mobile app
- This option ends on May 3rd (last day of spring term)
- You can get this bonus only in one of my courses (if you attend > 1)
#+attr_latex: :width 400p
[[../img/datacamp3.png]]

** DONE GNU Treats: ~speed-type~, ~treemacs~ and ~gtypist~

- An attractive alternative to ~Dired~ is the ~treemacs~ package. It
  looks like this on my PC (and also works for the terminal Emacs):
  #+attr_latex: :width 400px
  [[../img/t_treemacs.png]]

- If you want to be faster on the keyboard, try [[https://www.gnu.org/savannah-checkouts/gnu/gtypist/gtypist.html#:~:text=GNU%20Typist%20(also%20called%20gtypist,the%20GNU%20General%20Public%20License.][GNU Typist]], a free
  10-lesson online trainer for increasing your typing skills.
  #+attr_latex: :width 400px
  [[../img/gtypist.png]]

- There is also an Emacs package to practice touch/speed typing in
  Emacs called ~speed-type~. You have to install it with ~M-x
  package-list-packages~, then find the package in the list and install
  with ~i~ and ~x~. [[https://github.com/dakra/speed-type][More information on GitHub.]]

* Week 6: Bonus review, coding loops
#+attr_latex: :width 400px
[[../img/5_loop.jpg]]

- [X] Projects 2nd sprint review looming (March 10)
- [X] How to reference and document coding support by AI
- [X] Coding loops: ~for~, ~while~, ~apply~, ~repeat~
- [X] Lectures and exercises
- [X] Bonus exercises for extra credit: ~for~, ~while~

** DONE Assignments with an AI "wingbot"
#+attr_latex: :width 400px
[[../img/3_bonus_bot.png]]

- If you use AI to solve problems, you need to document that you
  struggled with the problem yourself so that it is clear that the AI
  was a last resort or really just a "helper", and not God.

- To do this, don't delete failed attempts, and demonstrate that you
  tested the AIs answer thoroughly.

- Also, you must cite it as a reference (complete and consistent)

** DONE Projects: 2nd sprint review
#+attr_latex: :width 400px
[[../img/sprint.png]]

- Deadline for 2nd sprint review: Friday, March 10, 1 pm
- To do: literature review (you'll get a template from me)
- Feedback for each team submitted via Email (PDF from Org-mode)

* Week 7 - ~apply~, ~break~
#+attr_html: :width 400px
#+caption: Photo by Brett Jordan on Unsplash
[[../img/7_goforit.jpg]]

- [X] Loops with ~apply~ (Mon/Wed)
- [ ] Exercises with ~apply~ (Fri)
- [ ] Escaping loops with ~break~ and ~next~
- [ ] Repeating commands without condition with ~repeat~

** Review: ~apply~ and ~tapply~

- Compute the arithmetic average over columns for the following
  matrix using R's ~apply~ function:
  #+begin_src R
    mat <- cbind(diag(3),
                 c(1,NA,NA))
    mat
  #+end_src

- Solution:
  #+begin_src R
    apply( X = mat,
          MARGIN = 2,
          FUN = mean,
          na.rm = TRUE)
  #+end_src

- How many male and female passengers traveled on the Titanic? Answer
  the question using R's ~tapply~ function.

  /Tip: Turn the built-in ~table~ Titanic into a data frame ~Titanic_df~
  and check its structure./
  #+begin_src R
    Titanic_df <- as.data.frame(Titanic)
    str(Titanic_df)
  #+end_src

  #+RESULTS:
  : 'data.frame':       32 obs. of  5 variables:
  :  $ Class   : Factor w/ 4 levels "1st","2nd","3rd",..: 1 2 3 4 1 2 3 4 1 2 ...
  :  $ Sex     : Factor w/ 2 levels "Male","Female": 1 1 1 1 2 2 2 2 1 1 ...
  :  $ Age     : Factor w/ 2 levels "Child","Adult": 1 1 1 1 1 1 1 1 2 2 ...
  :  $ Survived: Factor w/ 2 levels "No","Yes": 1 1 1 1 1 1 1 1 1 1 ...
  :  $ Freq    : num  0 0 35 0 0 0 17 0 118 154 ...

- Solution:
  #+begin_src R
    tapply(X = Titanic_df$Freq,
           INDEX = Titanic_df$Sex,
           FUN = sum,
           na.rm = TRUE)
  #+end_src

  #+RESULTS:
  :   Male Female
  :   1731    470

- How many survivors vs. non-survivors were there?
  #+begin_src R
    tapply(X = Titanic_df$Freq,
           INDEX = Titanic_df$Survived,
           FUN = sum,
           na.rm = TRUE) -> survived
    survived
  #+end_src

  #+RESULTS:
  :   No  Yes
  : 1490  711

** Bonus exercises coding loops (24-Feb)
#+attr_latex: :width 400px
#+Caption: Photo by Frugal Flyer on Unsplash.com
[[../img/bonus.jpg]]

1) ~for~ loops: download the *raw* bonus exercise file [[https://github.com/birkenkrahe/ds2/tree/main/org][from GitHub]] and
   save it as ~5_loop_for_bonus.org~. Upload your solution to Canvas.
2) ~while~ loops: download the *raw* bonus exercise file [[https://github.com/birkenkrahe/ds2/tree/main/org][from GitHub]] and
   save it as ~6_loop_while_bonus.org~. Upload your solution to Canvas.

** AWESOME! 45 THINGS YOU LEARNT IN 6 WEEKS!

- You did not just hear about these things, you used them
- You applied them within a infrastructure that you fully controlled
- You're ready for advanced R programming and data engineering work

| TERM                 | MEANING                                           |
|----------------------+---------------------------------------------------|
| Scoping              | Rules of storing/retrieving objects               |
| Environment          | Virtual compartment for data and functions        |
| Global environment   | All user-created objects                          |
| Package environments | Objects contained in packages                     |
| Namespace            | Defines visibility of package functions           |
|                      | E.g. in ~base::~ for the ~base~ package               |
| ~ls()~                 | List global environment                           |
| ~ls(package:base)~     | List functions in the ~base~ package                |
| Local environment    | Objects created when function is called           |
| Search path          | List of environments searched, ~search()~           |
| ~matrix~               | Create matrix                                     |
| ~seq~                  | Create numerical sequence vector                  |
| ~base::data~           | List or load dataset                              |
| ~NaN~                  | Not a number                                      |
| ~Inf~                  | Infinite numerical value                          |
| ~NA~                   | Missing value                                     |
| ~NULL~                 | Null object - returned when value undefined       |
| ~paste~                | Paste arguments together as string                |
| ~rm~                   | Remove R objectts, e.g. ~rm(list=ls())~             |
| Exact arguments      | Full argument tag                                 |
| Partial argument     | Argument tags abbreviated                         |
| Positional argument  | Arguments inferred by position alone              |
| Mixed arguments      | Different matching styles are mixed               |
| Ellipsis             | Variable number of arguments is accepted          |
| ~args~                 | Return exact argument tags with defaults          |
| ~...~                  | Ellipsis in the ~args~ or ~Usage~ section of the ~help~ |
| ~if~                   | conditional (continue if condition ~TRUE~)          |
| ~else~                 | alternative (continue if condition ~FALSE~)         |
| ~ifelse~               | test logical condition on vectors                 |
| ~else if~              | stacked ~if~                                        |
| nesting ~if~           | ~if~ statements one after the other                 |
| stacking ~if~          | ~else~ statement  followed by ~if~                    |
| string ~switch~        | string expression is checked                      |
| numeric ~switch~       | positional matching of integer expression         |
| ~for (i in X)~         | loop over index ~i~                                 |
| ~X~                    | loop index or vector index                        |
| ~{..}~                 | loop body                                         |
| Nesting loop         | inner loop inside outer loop                      |
| Loop by value        | condition computed directly, e.g. ~1:10~            |
| Loop by index        | condition from vector, e.g. ~1:length(vec)~         |
| ~while~                | loop while /loopcondition/ is ~TRUE~                  |
| ~apply~                | apply ~function~ to the ~margin~ of a dataset ~X~       |
| ~tapply~               | apply ~function~ to subsets grouped by ~factor~       |
| ~lapply~               | apply ~function~ to ~list~ members, return ~list~       |
| ~sapply~               | simplified ~lapply~, returns vector                 |
| ~vapply~               | ~apply~ when you know the return datatype           |
| ~mapply~               | multivariate version of ~sapply~                    |

* Week 8 -  ~next~, ~repeat~
#+attr_latex: :width 400px
[[../img/midterms.png]]

- Midterm results: not too shabby! Room for improvement!
- Complete DataCamp projects (esp. unguided)
- Set yourself small goals (time management, grades, weather data)
- Visualize & go through Kaggle projects
- Learn or improve webscraping

** DONE R data analysis without programming: ~lessR~
#+attr_latex: :width 200px
[[../img/lessR.png]]

#+begin_example
  install.packages("lessR")
  library(lessR)
#+end_example

** DONE Review: ~break~

1) [ ] What does ~break~ do? Will this work? Explain if or if not and why.
   #+begin_src R
     x <- 4
     if (x==5) {
       cat("TRUE\n")
     } else {
       cat("FALSE\n")
       break
     }
   #+end_src

   #+RESULTS:
   : FALSE
   : Error: no loop for break/next, jumping to top level

   #+begin_notes
   See ~help(break)~: ~break~ breaks out of a ~for~, ~while~ or ~repeat~ loop.
   Control is transferred to the first statement outside the inner-most loop.
   #+end_notes

2) [ ] Let's write an example together and refresh some knowledge!
   1) loop over the string "Back from the weekend"
   2) print each letter of the string
   3) leave the loop if you encounter a "w"

   Expected output:
   #+begin_example org
   : [1] "Back from the weekend"
   : [1] "Back from the "
   #+end_example

   /Tips:/ ~strsplit(s,"")~ splits a string ~s~ into its elements, ~rev~ reverses
   the order of the values of a vector, and ~na.omit~ removes ~NA~ values.

   Let's test these new functions:
   #+begin_src R
     strsplit("bwahahah",split="")
     rev(x=c("banana","rama"))
     foo <- c("balarney", rep(NA,3))
     foo
     na.omit(foo)
   #+end_src

   #+RESULTS:
   : [[1]]
   : [1] "b" "w" "a" "h" "a" "h" "a" "h"
   : [1] "rama"   "banana"
   : [1] "balarney" NA         NA         NA
   : [1] "balarney"
   : attr(,"na.action")
   : [1] 2 3 4
   : attr(,"class")
   : [1] "omit"

   #+begin_src R
     ## create a string object 'msg' with "Back from the weekend"
     msg <- "Back from the weekend"
     msg
     ## initialize a vector 'result' of NAs of the same length as 'msg'
     rep(NA,times=nchar(msg)) -> result
     ## split 'msg' into individual letters and save it to 'msg'
     strsplit(x=msg,split="") -> msg
     ## unlist the split message and save it to 'msg'
     unlist(msg) -> msg
     ## loop over 'msg'
     for (i in 1:length(msg)) {
       ## if msg not "w" then save letter to 'result'
       if (msg[i]!="w") {
         result <- c(msg[i], result)
                                             # alternative: result[i] <- msg[i]
       } else {
         ## otherwise 'break' and leave the loop
         break
       }
     }
     ## print values 1 to 19 of 'result'
     result[1:19]
     ## omit NAs and overwrite 'result'
     na.omit(result) -> result
     ## reverse letters and overwrite 'result'
     rev(result) -> result
     ## paste 'result' and collapse spaces "" between letters
     paste(result, collapse="")
   #+end_src

   #+RESULTS:
   : [1] "Back from the weekend"
   :  [1] " " "e" "h" "t" " " "m" "o" "r" "f" " " "k" "c" "a" "B" NA  NA  NA  NA  NA
   : [1] "Back from the "

3) Solution:
   #+begin_src R
     msg <- "Back from the weekend"
     msg
     rep(NA,nchar(msg)) -> result
     unlist(strsplit(msg,"")) -> msg
     for (i in 1:length(msg)) {
       if (msg[i] != "w") {
         result = c(msg[i], result)
       } else {
         break
       }
     }
     paste(rev(na.omit(result)), collapse="")
   #+end_src

** TODO Re-download ~8_loop_break_practice.org~

** TODO Fun: New ChatGPT API - use bot in R
#+attr_latex: :width 400px
[[../img/chatgpt.jpg]]

- Announcement: OpenAI has opened the ChatGPT API. Later, I want to
  share a function with you to run queries from within R. To
  participate fully, register with OpenAI if you haven't done so yet:
  https://chat.openai.com/auth/loginLinks to an external site. - use
  your Lyon Gmail to register, this way it stays in the family.

1) Get your secret ~api_key~ [[https://platform.openai.com/account/api-keys][here from OpenAI]] (you need to register)
2) [[https://gist.githubusercontent.com/rasmusab/c25badf55f5dacee14ab13834798d3ef/raw/e3af90fc32d91c974cd2ec9ddb2f7bf52e992cff/chat-gtp-api-call.R][Add this code]] to your ~~/.Rprofile~ file (including the secret key)
3) Install ~httr~ and ~stringr~
4) Now the function ~ask_chatgpt~ will be available to you (GitHub typo)

Let's try this!
- Example:
  #+begin_src R
    ask_chatgpt("How can I get the arguments of an R function?")
  #+end_src

  #+RESULTS:
  : [1] "To get the arguments of an R function, you can use the `args()` function. For example, if you want to get the arguments of the `mean()` function, you can run:\n\n```\nargs(mean)\n```\n\nThis will output:\n\n```\nfunction (x, ...) \nNULL\n```\n\nThis means that the `mean()` function takes one mandatory argument `x`, followed by any number of additional arguments specified using `...`."

- Something fancier from the last session:
  #+begin_src R
    ask_chatgpt("In R, loop over the string 'Back from the weekend', leave the loop when you encounter the letter 'w', and print the resulting string up to the letter 'w' only.")
  #+end_src

  #+RESULTS:
  : [1] "```{r}\nstring <- 'Back from the weekend'\n\nfor (char in strsplit(string, '')[[1]]) {\n  if (char == 'w') {\n    break\n  }\n  cat(char)\n}\n```\n\nOutput:\n\n```\nBack from the\n```"

- Hmmm...a little hard to read (need to take this apart with R's ~tm~
  and ~qdap~ functions, save to file, then read it in). After some work:
  #+begin_src R :results silent
    string <- 'Back from the weekend'
    for (char in strsplit(string,'')[[1]]) {
      if (char == 'w') {
        break
      }
      cat(char)  # prints to the console
    }
  #+end_src

- The code output is formatted for RStudio notebooks:
  #+attr_latex: :width 400px
  [[../img/chatgpt_rstudio.png]]

- This is apparently not free (though I am not aware of having given
  OpenAI my credit card or Paypal information): according to Baath,
  #+begin_quote
  Cost is $0.002 per 1000 returned words, which roughly translates to
  that $1 gives you between 1000 and 2000 calls.
  #+end_quote

- A last example, less code, more text:
  #+begin_src R
    ask_chatgpt("Are there reasons to use Emacs + ESS + Org-mode instead of RStudio for R code development?")
  #+end_src

  #+RESULTS:
  : [1] "As an AI language model, I cannot have opinions. However, I can provide you with some points that could help you decide whether to use Emacs + ESS + Org-mode instead of RStudio for R code development. \n\nEmacs + ESS + Org-mode is a powerful combination that provides an integrated environment for R programming, which includes all the features necessary for code development, data management, and reproducible research. Here are a few reasons to consider using Emacs + ESS + Org-mode:\n\n1. Customization: Emacs is highly customizable and is designed to be customized by the user. Also, Org-mode is a highly customizable note-taking and authoring tool. Together, Emacs + ESS + Org-mode provide an environment that can be tailored to your needs and preferences.\n\n2. Powerful text editor: Emacs is a highly versatile text editor that allows for efficient navigation and manipulation of large text files.\n\n3. Integration with other languages: Emacs supports other programming languages and can be used as an integrated development environment (IDE) for many other languages.\n\n4. Powerful support for literate programming: Org-mode provides support for literate programming, which allows the integration of narrative, analysis, and code in a single document. This feature can save time and increase productivity.\n\nOn the other hand, RStudio is a popular development environment for R that is designed specifically for R programming. Here are a few reasons to consider using RStudio:\n\n1. User-friendly interface: RStudio has a user-friendly interface that makes it easy to use for R programming.\n\n2. Integrated tools: RStudio has integrated tools for debugging, version control, package management, and data visualization.\n\n3. Shiny: RStudio's Shiny makes it easy to develop interactive web applications using R programming language.\n\n4. Community-driven development: RStudio is actively developed and has a large community of users who contribute to its development.\n\nOverall, the choice of tool for R development depends on your personal preferences and needs. Both Emacs + ESS + Org-mode and RStudio are powerful tools that can provide an efficient environment for R programming."

- Cleaned up:
  #+begin_quote
  "As an AI language model, I cannot have opinions. However, I can
  provide you with some points that could help you decide whether to
  use Emacs + ESS + Org-mode instead of RStudio for R code
  development.

  Emacs + ESS + Org-mode is a powerful combination that provides an
  integrated environment for R programming, which includes all the
  features necessary for code development, data management, and
  reproducible research. Here are a few reasons to consider using
  Emacs + ESS + Org-mode:

  1. Customization: Emacs is highly customizable and is designed to be
     customized by the user. Also, Org-mode is a highly customizable
     note-taking and authoring tool. Together, Emacs + ESS + Org-mode
     provide an environment that can be tailored to your needs and
     preferences.

  2. Powerful text editor: Emacs is a highly versatile text editor
     that allows for efficient navigation and manipulation of large text files.

  3. Integration with other languages: Emacs supports other programming languages and can be used as an integrated development  environment (IDE) for many other languages.

  4. Powerful support for literate programming: Org-mode provides
     support for literate programming, which allows the integration of
     narrative, analysis, and code in a single document. This feature
     can save time and increase productivity.

  On the other hand, RStudio is a popular development environment for
  R that is designed specifically for R programming. Here are a few
  reasons to consider using RStudio:

  1. User-friendly interface: RStudio has a user-friendly interface that makes it easy to use for R programming.

  2. Integrated tools: RStudio has integrated tools for debugging,
     version control, package management, and data
     visualization.

  3. Shiny: RStudio's Shiny makes it easy to develop interactive web applications using R programming language.

  4. Community-driven development: RStudio is actively developed and
     has a large community of users who contribute to its
     development. Overall, the choice of tool for R development
     depends on your personal preferences and needs. Both Emacs +
     ESS + Org-mode and RStudio are powerful tools that can provide an
     efficient environment for R programming."
  #+end_quote

** TODO Bonus exercises ~break~, ~next~, ~repeat~
#+attr_latex: :width 400px
[[../img/exercise.jpg]]

[[https://lyon.instructure.com/courses/1041/assignments/8975][See Canvas.]]

** TODO Live assignments: DataCamp / test 4
#+attr_latex: :width 400px
[[../img/msg_week_8.png]]

* Week 9 - ~function~ creation and arguments
#+attr_latex: :width 400px
[[../img/function.jpg]]

*REMINDERS* (check your Canvas calendar):
- [X] Complete *test 4* by tonight 11:59 pm!
- [X] Complete *DataCamp assignment* "Utilities" by Friday this week!
- [X] Complete *bonus assignment* with ~break~, ~next~, ~repeat~ by next week!
- [X] [[https://lyon.instructure.com/courses/1041/assignments/9014][Literature review (2nd sprint review) by end of next week]]!

*THIS WEEK*:
- [X] Writing functions with/without arguments with ~function~
- [X] Returning results with/without ~return~
- [ ] Setting (default) arguments, checking for missing arguments
- [ ] Exception handling, timing and masking

*UPCOMING TOPICS*:
- Utilities: regular expressions, pattern matching, date/time
- Text mining with bag-of-words
- Data science on the command line with csvkit
- Database operations on the command line with SQLite
- Data pipeline with Python on the command line

*Program games in Snap! (from Academic Day):*
- [X] https://github.com/birkenkrahe/snap

* Week 10 - special functions and exceptions
#+attr_latex: :width 400px
#+caption: Photo by Ricardo Gomez Angel on Unsplash
[[../img/exception.jpg]]

- Download the new (partially filled) version of the practice file
- Continue alongside the lecture on function arguments
- Keep up your DataCamp practice streak and solve the bonus problems

*REVIEW:*
1) What does "lazy argument evaluation" mean?
2) How can you multiply two matrices in R?
3) 2 * 4 = 4 * 2 but is A * B = B * A if A,B are matrices?
4) What do you remember about the last algorithm we looked at?
   #+attr_latex: :width 400px
   #+caption: BPMN diagram (main process)
   [[../img/9_mult1.png]]
   #+attr_latex: :width 250px
   #+caption: BPMN diagram (subprocess)
   [[../img/9_mult1_sub.png]]

** Therapeutic spring break reading
#+attr_latex: :width 400px
#+caption: Photo by Drew Beamer on Unsplash
[[../img/forbes.jpg]]

- What's the future for data science? What should you focus on?
- Read [[https://www.forbes.com/sites/forbestechcouncil/2022/10/13/predictions-on-the-future-of-data-science/?sh=2db6bd5875ef][this paper]] over spring break for discussion afterwards
- You will get a luxury letter print copy for personal perusal
- Also interesting: [[https://www.datacamp.com/blog/python-vs-r-for-data-science-whats-the-difference][Python vs. R in the DataCamp blog]] (Dec 2022)
  + not much to discuss here - straightforward comparison
  + this article is unduly skewed towards the "tidyverse", alas
  + don't forget that you cannot really trust commercial comments

** Exception handling: download practice file
#+attr_latex: :width 400px
#+caption: Fast Rope Insertion Extraction System. Photo: Robert Sullivan, Flickr.com
[[../img/insertion.jpg]]

- You're already working on the practice file
  ~9_functions_special_practice.org~

- Download ~9.org~ from GitHub and insert it (~C-x i~) into the practice
  file to continue

* Week 11 - Data science future & text mining
#+attr_latex: :width 400px
#+caption: Photo by Dunk Hacking the bridge to your future (Flickr.com)
[[../img/debugging.jpg]]

- [X] I evaluated & graded outstanding exercises (*please check*)
- [X] The literature reviews were all impressive in their own way:
  + laying open your search strategy
  + fancy foot[note] work
  + take a look at my Org-mode files for layout
- [X] Next sprint review: results! *Due on April 21.*
- [X] Late submissions for test 4 *by 3/31* for partial credit
- [X] Next *test* due March 31 (open for partial credit until April): we'll
  review some questions on Wednesday
- [X] *Bonus points* for experience report from the job fair April 4 -
  [[https://lyon.instructure.com/courses/1041/assignments/9612][see Canvas]]

** Predictions On The Future of Data Science
#+attr_latex: :width 400px
#+caption: Photo by Katsujiro Maekawa, Korea (Flickr.com)
[[../img/future.jpg]]

Find someone else in the class to discuss this article and extract:
1) One central hypothesis
2) Any questions you have
3) Your own view of the hypothesis
4) Any other views you hold on the subject.

#+begin_quotes
- Print article so that you can annotate it manually.
- Ask yourself WHO wrote this article and for WHOM?
- Verify important information.
- Extract hypotheses.
- Eliminate hyperbole.
- Summarize conclusions.

Some "Research" results:
1) Author has 135k + 140k = 275k followers (well below "300k+")
2) "[[https://geekflare.com/nocode-platforms-to-build-product/][12 best Low-code or No-code Platforms to Build Amazing Products]]"
   (Pathak, 2022) vs. "[[https://www.trustradius.com/buyer-blog/low-code-pros-cons][Pros and Cons of Low-Code Technology Today]]"
   (Hanif, 2022) vs. "Characteristics and Challenges of Low-code
   Development: The Practitioner's Perspective" ([[https://arxiv.org/abs/2107.07482][Luo et al, 2021]]).
3) What are other "most secure jobs in the world?" - Anybody with
   long, hard training and great responsibility (pilots, MDs), or
   difficult work in varying circumstances (plumber, electrician).
4) Basic principles of QM for microscopic systems (Fitzpatrick, 2013):
   1. *Principle of Limitation* (Dirac's Razor): QM only answers
      questions regarding the outcome of possible experiments (i.e. if
      you cannot design an experiment, you have nothing).
   2. *Principle of Superposition of States*: systems can be partly in
      each of two or more other states. States can be described as a
      superposition of two or more states. Such superpositions can be
      performed in an infinite number of ways. Example: Magnetic
      Resonance Imaging (MRI).
   3. *Principle of Indeterminacy* (Schrödinger's Cat): any observation
      on a system causes it to jump into one or more particular
      states. It is impossible to predict which state that will be but
      the probability of a given system jumping into a final given
      state can be predicted. Example: quantum tunneling - particles
      can tunnel through a wall (with a small probability) - [[https://en.wikipedia.org/wiki/Quantum_tunnelling#/media/File:EffetTunnel.gif][see here]].
5) How does a quantum computer work, and how can quantum algorithms be
   used to solve real world problems? ([[https://www.ibm.com/topics/quantum-computing][IBM, n.d.]])
#+end_quotes

** TidyverseSceptic and RDesign
#+attr_latex: :width 400px
#+caption: Photo: E.A.Harris in R.W. Howard 1995: Apollo 13.
[[../img/apollo.jpg]]

- Incidentally, do you know anything about [[https://en.wikipedia.org/wiki/Apollo_13][Apollo 13]]?
- Design, learning and practice aren't usually aligned[fn:4] 
- Article by Matloff: [[https://github.com/matloff/TidyverseSkeptic/blob/master/RDesign.pdf][R Design Patterns, Base-R vs. Tidyverse]]
- [[https://github.com/matloff/TidyverseSkeptic][TidyverseSceptic: Teaching R kinder, gentler, more effective]]

** Bonus points for job fair experience report!
#+attr_latex: :width 400px
[[../img/fair_flickr_color.jpg]]

- Write long paragraph about your job fair experience for 10 points.
- Great opportunity to network, mix and mingle, and show off.
- Bring 1 page resume, a few questions, a story, and dress up.
- Must go: graduating seniors. Should go: everyone else.
- Motivate each other by going as a pair, a group, a team.
- Post your experience report in Canvas.

** DataCamp webinar: building your portfolio
#+attr_latex: :width 400px
[[../img/resting_flickr_color.jpg]]

[[https://careerfoundry.com/en/blog/data-analytics/data-analytics-portfolio-examples/][See: 9 of the best data analytics portfolios on the web]]
(Hillier, 2023)

** Review and test pre-view
#+attr_latex: :width 400px
#+caption: Photo: Chris Brady serves a pizza (US Dept Agriculture), Aug-5 2016
[[../img/review.jpg]]

Don't sweat over these now - ask yourself if you know an answer or
not, then listen to the repetition of my explanation and answer.

1) What does ~strsplit~ do and what does it return?
   #+name: split
   #+begin_src R
     strsplit("hello",split="") -> s
     s
     class(s)
   #+end_src

   #+RESULTS: split
   : [[1]]
   : [1] "hello"
   : [1] "list"

2) How can you unlist a list?
   #+begin_src R
     <<split>>
     unlist(s) -> vs
     is.vector(vs)
     vs
   #+end_src

   #+RESULTS:
   : [[1]]
   : [1] "h" "e" "l" "l" "o"
   : [1] "list"
   : [1] TRUE
   : [1] "h" "e" "l" "l" "o"

3) What does 'exception handling' mean?
   #+begin_notes
   Protecting against a user-defined function malfunctioning,
   e.g. because an operation is not allowed, or the results are
   undefined, or a mandatory argument is missing. To protect use:
   ~break~, ~next~, ~missing~, ~warning~, ~stop~.
   #+end_notes

4) How can you make a function safe against missing arguments?
   - use ~missing~ in a condition check
   - set a default argument
   #+begin_src R
     f <- function(x) {
       if(missing(x)) x <- "no arg"
       return(print(x))
     }
     f()
     f(1)
   #+end_src

   #+RESULTS:
   : [1] "no arg"
   : [1] 1

5) Is the ellipsis argument mandatory or optional?
   #+begin_src R
     sapply(list(1:10,NA),
            FUN=mean,
            na.rm=TRUE)
   #+end_src

   #+RESULTS:
   : [1] 5.5 NaN

   #+begin_src R
     args(sapply)
   #+end_src

   #+RESULTS:
   : function (X, FUN, ..., simplify = TRUE, USE.NAMES = TRUE) 
   : NULL

** Introducing Bag-of-Words text mining
#+attr_latex: :width 400px
[[../img/bagofwords.png]]

- Download the practice file from GitHub: ~10_text_mining_practice.org~
- Open it in Emacs to code along
- At the end of the session, do not forget to ~save.image~
- [[https://bookdown.org/ndphillips/YaRrr/rdata-files.html][More information about ~.RData~ storage here]]

** TODO What did you learn this week?

Mon:
- AI is going to be more important in the future of data science
- Data science is becoming more of a team sport
- When listing things, consider number and order

Wed:
- Text mining packages in R include: ~qdap~, ~wordcloud~ and ~tm~.
- The basis of bag-of-words is words and word frequencies
- The goal: create a Term-Document-Matrix from a clean corpus

Fri:
- Cleaning functions from ~tm~ applied to a simple string
- Saving an R session with ~save.image~ in an ~.RData~ file

* Week 12 - text mining / cmdline
#+attr_latex: :width 400px
#+caption: Photo: by Cassie Kozyrkov (Google) on Twitter.com@quaesita
[[../img/chatgpt.jpeg]]

- Finish [[https://lyon.instructure.com/courses/1041/assignments/9004][text mining with bag-of-words]] by Friday this week (7-Apr)
- Useful: feed [[https://lyon.instructure.com/calendar][Canvas calendar]] to your Google calendar ([[https://community.canvaslms.com/t5/Student-Guide/How-do-I-subscribe-to-the-Calendar-feed-using-Google-Calendar-as/ta-p/535][instructions]])
- Useful: R's startup mechanism - 4 p. (~help(base::Startup)~ & PDF@GitHub)

** About Artificial Idiocy (AI)
#+attr_latex: :width 400px
#+caption: Mesmeric Therapy, by an unknown French painter (1778/1784)
I[[../img/mesmerism.jpg]]
#+begin_quote
"Google Bard Fakes Math Skills Despite Being Incompetent - While
ChatGPT, although slightly more proficient, still struggles to
identify errors when prompted." [[https://medium.com/@0ce/google-bard-fakes-math-skills-despite-being-incompetent-70f3efbb3ba0][Link to the article (medium.com)]]​
#+end_quote

- The current narrative is dangerous: /"Chatbots are useful tools but
  they're imperfect of course, just like you and me."/ 
- Why? Because they're not reliable tools - like a hammer that
  strongly believes it's a hacksaw - and they are highly suggestive.
- AI = Artificial Idiocy? Modern resurrection of 18th century
  mesmerism: pseudo-quackery fuelled by hysteria in the Paris salons.

/Image: Mesmeric Therapy/Animal Magnetism (ca. 1780)/[fn:5]

** Command line data science
#+attr_latex: :width 400px
#+caption: Photo: Super Hornet. Source: Flickr.com flic.kr/p/2nDe28b
[[../img/11_hornet.jpg]]

*Planned:*
- Introduction to command line data science
- Setting up shop at DataCamp workspaces
- Trying ~curl~ and ~wget~ to download data files
- Learning more about regular expressions (regex)
- Exploring ~cvskit~ (Python) and ~xsv~ (Rust)

** What did you learn this week?

Mon:
- Cleaning a corpus with ~tm_map~ and ~tm~ functions
- Creating a Text-Document-Matrix (TDM) / Document-Term-Matrix (DTM)
- Loading the ~wordcloud~ package

Wed:
- What is the command line?
- What can you do on the command line?
- Why would you use the command line for data science?

Fri: NO CLASS - EASTER FRIDAY - SEE YOU NEXT MONDAY!

* Week 13 - data science on the cmdline
#+attr_latex: :width 400px
#+caption: Wawel Royal Castle in Krakow, Poland (Flickr.com)
[[../img/wawel_castle_krakow.jpg]]

*Project:*
- [X] [[https://lyon.instructure.com/courses/1041/pages/sign-up-for-final-presentations][Sign up for final presentations now]] - last 2 weeks
- [X] [[https://lyon.instructure.com/courses/1041/assignments/9906][3rd sprint review is live]] - deadline April 21
- [X] My office hours this week: Thu 4-5 pm, next week: Mon-Thu 4-5 pm

*Assignments:*
- [X] Test 6 is live - complete for full (partial) credit by April 14 (21).
- [X] Last DataCamp assignment deadlines: April 21 and April 28
- [X] Two more in-class practice file submissions (TBC)

** [[https://docs.google.com/forms/d/e/1FAIpQLSdLkJ65AaAsx-g2_cGj2y3SXwmpz_HdH9mr86QDKGqZBkSNPA/viewform][2023 Arkansas Summer Research Institute]]
#+attr_latex: :width 400px
#+caption: Cat on Sidewalk (1959, Angelo Rizzuto) Flickr.com
[[../img/cat.jpg]]

- Great opportunity to network and learn
- Free and virtual
- Only 2 weeks long (June 1-19)
- Share link with others: https://tinyurl.com/apply2023asri

** TODO What did you learn this week?

Mon: NO CLASS

Wed:
- What is the DataCamp workspace?
  #+begin_notes
  1) An online application
  2) An interface to an editor, a terminal and an R console
  3) An interface to a Jupyter notebook
  4) It has a REPL (Read-Eval-Print-Loop)
  #+end_notes
- What is a Jupyter notebook?
  #+begin_notes
  1) A literate programming app programmed in Python
  2) A notebook with text and code cells
  3) A file with the file extension ~.ipynb~
  #+end_notes
- How can you run an R file in the DataCamp workspace?
  #+begin_notes
  1) With ~Rscript~ on the command line
  2) With ~R CMD BATCH~ as a batch job on the command line
  3) On the R console with ~shell~
  #+end_notes

Fri: 
- GNU Unix shell utilities on the command line
- Pipeline to chain small Unix commands
- Commands covered: ~ls~, ~alias~, ~tee~, ~curl~

* Week 14 - Introduction to csvkit
#+attr_latex: :width 400px
#+caption: Andy Miccone, Milsa (Flickr.com)
[[../img/12_kit.jpg]]

- Installing ~csvkit~
- Getting Excel data for conversion to CSV data
- Looking at CSV data with ~in2csv~, ~csvlook~ and ~csvstat~
- Go to your old DataCamp workspace now and type ~Ctrl .~
- *This will give you just the (Ubuntu Linux) terminal*
- Alternatively open a Linux-type terminal elsewhere

** [[https://github.com/birkenkrahe/org/blob/master/grading/Presentation_Assessment_Form.pdf][Rubric for evaluating your presentations]]
#+attr_latex: :width 400px
#+caption: Dicky Smythe, motorcycle speedway rider (1948) - Flickr.com
[[../img/presentation.jpg]]

- The rubric covers all aspects of a successful presentation
- Test the technology before presenting - the devil's in the detail!
- Zip all materials and upload them to Canvas no later than May 3rd
- If I don't get your material by that time, you won't get any points

** What about the last DataCamp lesson? (BONUS)
#+attr_latex: :width 400px
#+caption: Photo: Microscopic apocalypse - the devil is in the detail (Flickr.com)
[[../img/microscopic.jpg]]

- This lesson gives you an introduction to (or a reminder of) SQL
- SQL is by far the most important data science language to know
- Complete the last lesson, too, if you can and grab the certificate
- It brings together SQL, bash, and Python
- In this way, you've got a head start in FOUR data science dialects!
- I may produce another video based on the [[https://csvkit.readthedocs.io/en/latest/tutorial.html][csvkit tutorial]] this summer[fn:6]

** [[https://www.freecodecamp.org/news/learn-bash-scripting-tutorial/][Free 1 hr online ~bash~ scripting tutorial]]
#+attr_latex: :width 400px
[[../img/bashscripting.png]]

- Uses ~vim~ which you should have on Windows, too
- Alternatively, use a ~bash~ template at [[https://replit.com][replit.com]]
- Or use DataCamp workspace and run files with ~bash~

** Finish ~csvkit~ practice

1) What is ~csvkit~ exactly?
   #+begin_quote
   A suite of Python scripts to manipulate files. It provides several
   scripts (aka commands) to use Unix-style programs (like ~sort~ or ~grep~) on  tabular data (like CSV files)
   #+end_quote
2) How did we address the problem of getting logged out often?
   #+begin_quote
     - By creating a shell script that re-installs ~csvkit~ and adds the
       location of the kit scripts (in ~.local) to the ~PATH~
     - The first line of which contains the shell program location
     - We have to ~source~ the script to export the ~PATH~ to global
   #+end_quote
3) Which ~csvkit~ command did we discuss already and what does it do?
   #+begin_quote
     - ~in2csv~ writes from Excel to CSV
     - the ~-n~ flag shows the worksheets in the Excel file
     - the ~--sheet~ flag writes selected Excel sheets
   #+end_quote

-----   
- Open your workspace in ~workspace.datacamp.com~
- Open a ~terminal~ in the ~Run~ tab of the workspace dashboard
- Initiate ~csvkit~ with the ~restart.sh~ file
- Change to the ~csvkit~ directory and check your files are there
#+begin_example sh
  source restart.sh  ## GNU source (.) searches in the current directory!
  cd csvkit
  ls -alF  ## the -F (--classify) attaches an indicator to the file listing
#+end_example

** What next? summary and outlook
#+attr_latex: :width 400px
#+caption: Deaf children of St. Rita's School, Cincinnati, singing Star Spangled Banner (LOC)
[[../img/signing.jpg]]
** Achievements:

- Learnt how to code in R (not just explore interactively)
- Learnt transferable skills on functional programming
- Text mining applications useful for natural language processing
- Engaged with a multitude of different R packages
- Used agile project management especially Scrum
- Learnt to use the command line for data processing
- Developed fluency with the GNU Emacs literate programming system

** Changes

- An introduction to regular expressions (see DataCamp course)

- Other languages than R? Python? Julia? Java? C++? SQL?

- RStudio instead of Emacs? Colaboratory? 

- Leave one session for reviewing the final exam questions?

- Let me know what you liked and what you didn't like: fill in the
  survey ([[https://lyon.instructure.com/courses/1021/assignments/10076]["CourseEval"@Canvas]]) by May 4, 5:59 pm (*bonus points*)

** Books
*** Buy the "Book of R" and keep it for life
#+attr_latex: :width 200px
#+caption: Cover, Book of R by TM Davies, NoStarch 2016
[[../img/bookofR.png]]

[[https://nostarch.com/bookofr][Link to the publisher.]]
*** Buy "The Art of R Programming" to go even further
To graduate to a full-fledged R programmer, get this excellent book:
#+attr_latex: :width 200px
#+caption: Cover, The Art of R Programming by Matloff (NoStarch 2011)
[[../img/TARP.png]]

[[https://nostarch.com/artofr.htm][Link to the publisher.]]
*** Tidyverse? Read (for free) R for Data Science
#+attr_latex: :width 200px
#+caption: Cover, R for Data Science (2e) by Hadley Wickham & Garrett Grolemund, O'Reilly 2023
[[../img/R4DS.png]]

- [[https://r4ds.hadley.nz/][Link to the website for the 2nd edition (2023)]]

- You should make up your own mind but you should take note of
  Matloff's essay "[[https://github.com/matloff/TidyverseSkeptic][TidyverseSceptic]]" and his side-by-side comparison
  "[[https://github.com/matloff/TidyverseSkeptic/blob/master/RDesign.pdf][R Design Patterns, Base-R vs. Tidyverse]]" for R beginners.

** Languages

- *SQL*: take my CSC 330 course next spring if you're still around,
  and/or work through introductory and intermediate SQL (PostgreSQL)
  on DataCamp (until July 6).

- Learn SQLite on your own (just use the standard tutorial)

- *Python:* take my CSC 109 course this summer, read "Python Crash
  Course" 3rd edition (NoStarch Press, 2022), or work through
  introductory and intermediate Python on DataCamp (until July 6).

- Discover data science compatibility in other languages you already
  know! For example: Natural Language Processing in *Java*, Data
  Visualization with *C++*, or Neural Nets with *Python*, animation with
  JavaScript.

- Search for, and apply R packages that interface with other
  languages: ~Rcpp~ (C++), ~RSQLite~ (SQLite), or ~reticulate~ (Python)

- Needless to say, stick with Emacs and keep using Org-mode,
  especially if you mix languages! Stay literate, don't go numb!

- If you tire of Emacs, I recommend ~replit.com~ templates for a
  multitude of languages - (still) free and online (with phone app).

** Career

- ​[[https://link.medium.com/pLGMURvz1yb][How To Improve Your Job Search With 4 + 1 Quick Tips]]:
  1) Apply to a lot of jobs
  2) Practice interviewing at tier 2 firms
  3) Adjust your resume every 20 or so applications
  4) Practice everything
  5) Fortune favors the bold

- Above and beyond, what you need in this field (CompSci and Data
  Science) is a set of GOALS and a SYSTEM of continuous improvement to
  meet these goals.

- What could be a good goal? Wanting to work in analytics for
  SpaceX. Work at a NYC stock broker firm. Work in bioinformatics to
  help develop new drugs. Learn machine learning methods to work for
  OpenAI. 

- Example SYSTEM components:
  1) *One-off:* complete DataCamp course on regression in R.
  2) *Routine:* practice daily on ALL completed DataCamp courses.
  3) *Routine:* read recent papers on regression applications beginning
     with literature reviews - especially important in this field
     (it's like computer science in the 1950s) - [[https://arxiv.org/pdf/2301.03774.pdf][see here]].
  4) *Routine*: find experts and join their communities on Twitter,
     Discord, Substack or Medium (though most of the data science
     celebrities have been infected with the Tidyverse virus, alas).
  5) *Repeatedly:* pull datasets off Kaggle or other places and go
     through the data science workflow on your own using an
     interactive notebook (for sharing). Especially useful if you have
     a feeling/knowledge for the data - e.g. sports data if you're an
     athlete, environmental data if you're a conversationist, art data
     if you're an artist etc.
     

* TODO Week 15 - Projects I
* TODO SURVEY - BONUS POINTS! DO IT NOW! PAYBACK TIME!
#+attr_latex: :width 400px
#+caption: Current course evaluation status
[[../img/eval.png]]

* TODO Week 16 - Projects II
* References

Fabio Moioli (13 Oct 2022). Predictions on the Future of Data
Science. In: Forbes magazine. URL: [[https://www.forbes.com/sites/forbestechcouncil/2022/10/13/predictions-on-the-future-of-data-science/?sh=2db6bd5875ef][forbes.com]].

Fitzpatrick (8 Apr 2013). Fundamental Principles of Quantum
Mechanics. Online: [[https://farside.ph.utexas.edu/teaching/qm/lectures/node6.html][utexas.edu]].

Hanif (28 Oct 2022). Pros and Cons of Low-Code Technology Today. Online:
[[https://www.trustradius.com/buyer-blog/low-code-pros-cons][trustradius.com]].

Hillier (28 March 2023). 9 of the best data analytics portfolios on
the web. Online: [[https://careerfoundry.com/en/blog/data-analytics/data-analytics-portfolio-examples/][careerfoundry.com]].

IBM (n.d.). What is quantum computing? Online: [[https://www.ibm.com/topics/quantum-computing][ibm.com]].

Luo et al (15 Jul 2021). Characteristics and Challenges of Low-code
Development: The Practitioner's Perspective. In: 15th ACM/IEEE
Int. Symp. ESEM. Online: [[https://arxiv.org/abs/2107.07482][arxiv.org]].

Pathak (16 Nov 2022). 12 best Low-code or No-code Platforms to Build Amazing
Products. Online: [[https://geekflare.com/nocode-platforms-to-build-product/][geekflare.com]].

* Footnotes
[fn:6]You don't really need a video but I would like to swap the
dataset used in the tutorial - about gun murders - with a more
palatable, positive dataset, and add some command line information.

[fn:5]Mesmer(1734-1815) postulated "animal magnetism/gravity" and
tried to restore nervous "balance" with magnets. Discovered
hypnotherapy in the process. Spectacular healing experiences due to
hysterical influences. Probably quackery. See also: [[https://en.wikipedia.org/wiki/Animal_magnetism][Wikipedia]].

[fn:4]This very course is an example - designed around R, we learn
  from books, and practice using Emacs + Org-mode literate
  programming. None of these elements were conceived together.

[fn:1] Topic: explore an R package; deliverables: proposal, literature
review, abstract, literate program, presentation.

[fn:2] ~:session~ starts an R console inside Emacs. It can be specified
at the start as a ~#+property~, or at the start of a code block on the
~#+begin_src~ headline.

[fn:3] The Global environment contains auto-loaded and user-defined
objects. Its contents are listed with ~ls()~ or ~ls('package:[name]')~.

