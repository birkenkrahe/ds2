#+TITLE:Writing Your Own Functions
#+AUTHOR: Marcus Birkenkrahe (building on Norman Matloff)
#+SUBTITLE:DSC205 Introduction to Advanced Data Science
#+STARTUP:overview hideblocks
#+OPTIONS: toc:nil num:nil ^:nil
#+PROPERTY: header-args:R :exports both
#+PROPERTY: header-args:R :results output
* README

  - This file accompanies the lecture on variables and assignments in
    R. To gain practice, you should type along in your own Org-mode
    file. You have to have R, Emacs + ESS installed and in the ~PATH~.

  - To make this easier, use the auto expansion (~<s~). This will only
    work if you have my ~.emacs~ file ([[https://tinyurl.com/lyonemacs][from GDrive]]) installed.

  - [TEST THIS] Add the following two lines at the top of your file,
    and activate each line with ~C-c C-c~ (this is confirmed in the
    echo area as ~Local setup has been refreshed~)):
    #+begin_example
    #+PROPERTY: header-args:R :exports both
    #+PROPERTY: header-args:R :results output
    #+end_example

  - Remember that ~C-M-\~ inside a code block indents syntactically
    (on Windows, this may only work if you have a marked region - set
    the mark with ~C-SPC~).

* Introduction to functions

  - A function is a group of instructions that takes inputs, uses them
    to computer other values, and returns a result.

  - The code [[oddcount]] defines a function to count the number of odd
    integers in its single argument.
    #+name: oddcount
    #+begin_src R :session :results silent
      oddcount <- function(x) {
          k <- 0
          for (n in x) {
              if (n %% 2 == 1) k <- k+1
          }
          return(k)
      }
    #+end_src

  - Let's test this with a couple of vectors.
    #+name: oddcount test
    #+begin_src R :session
      oddcount(c(1,3,5))
      oddcount(c(1,2,3,7,9))
    #+end_src

    #+RESULTS: oddcount test
    : [1] 3
    :
    : [1] 4

  - The C/C++ way of writing the loop is not preferred because the
    other method is cleaner and faster - we do not need to invoke
    ~length()~ or index arrays.
    #+name: oddcount_index
    #+begin_src R :session :results silent
      oddcount_i <- function(x) {
          k <- 0
          for(i in 1:length(x)) {
              if(x[i] %% 2 == 1) k < k+1
          }
          return(k)
      }
    #+end_src

  - ~x~ is the *formal* argument or parameter, and the vector called
    in the function call is the *actual* argument.

* Variable scope

  - Variables ~n~ and ~k~ defined only inside the function are not
    known outside of it - they're local, not global.
    #+name local
    #+begin_src R :session
      oddcount(c(1,2,3,7,9))
      n # local to the function definition
      k # local to the function definition
    #+end_src

    #+RESULTS:
    : [1] 4
    :
    : Error: object 'n' not found
    :
    : Error: object 'k' not found

  - *Formal parameters* in an R function are local variables. In
    [[formal]], if the function source code changed, ~z~ would not change.
    #+name: formal
    #+begin_src R :session
      z <- c(2,6,7)
      oddcount(z)
    #+end_src

    #+RESULTS: formal
    :
    : [1] 1

* Writing your own functions

  - [X] ~Nile~ is a built-in data set, a time series. How to find out?[fn:2]
    #+name: nile
    #+begin_src R :session
      class(Nile)
      data(package="datasets")
      data(Nile)
                                              #      help(Nile)   # in Org-mode, this operation has to be aborted
    #+end_src
    Here, ~class~ checks the object class, and ~data~ prints/loads the
    dataset. Remember to look these up if you don't recall them.

  - [X] How can you get the number of elements in the ~Nile~ dataset
    larger than a set value, e.g. ~1200~?
    #+name: count_nile
    #+begin_src R :session
      sum(Nile > 1200)
    #+end_src

  - [X] How can you get the average of those elements?
    #+name: average_nile
    #+begin_src R :session
      gt1200 <- which(Nile > 1200); gt1200
      nileSubsetGT1200 <- Nile[gt1200]; nileSubsetGT1200
      mean(nileSubsetGT1200)
    #+end_src

    #+RESULTS: average_nile
    : [1]  4  8  9 22 24 25 26
    :
    : [1] 1210 1230 1370 1210 1250 1260 1220
    :
    : [1] 1250

  - Let's analyze this:
    #+begin_example
    1   gt1200 <- which(Nile > 1200)
    2   nileSubsetGT1200 <- Nile[gt1200]
    3   mean(nileSubsetGT1200)
    #+end_example
    - Line 1: find indices for elements greater than 1200
    - Line 2: extract subset of Nile consisting of those elements
    - Line 3: compute the mean

  - To automate this type of operation, we can write a function mgd,
    using the compact form of the 3-step operation above:
    ~mean(Nile[Nile>1200])~[fn:3]. Note that this minimal design dispenses
    with a separate body indicated by ~{...}~ and ~return~[fn:1].
    #name: mgd
    #+begin_src R :session :results silent
      mgd <- function(x,d) mean(x[x > d])
    #+end_src

  - Let's check that the other form is syntactically OK.
    #+name: compact_mgd
    #+begin_src R :session :results silent
      mgdl <- function(x,d) {
          m <- mean(x[x > d])
          return(m)
      }
    #+end_src

* Footnotes

[fn:3]When you run this, you get the same result, but you should still
check identity, e.g. using the ~identical~ function:
#+begin_src R :session
  m1 <- mean(nileSubsetGT1200)
  m2 <- mean(Nile[Nile>1200])
  identical(m1,m2) # identity check
#+end_src

[fn:2]Challenge: write a function that tells you if a data set is
built-in or not. ~data()~ is already that function, because if the
dataset exists, it loads it, but what if we want a ~logical~ answer?

[fn:1]~return~ specifically is not needed because by default R returns
the last value computed. ~{~ and ~return~ are both functions,
too. Check that by looking at their respective help pages. ~{~ and ~(~
are *primitive* functions, while ~return~ and other self-defined
functions like ~mgd~ are *closures*. You can check that with the
(storage) ~typeof~ function.
